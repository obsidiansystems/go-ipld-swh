package ipldswh

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

func (n BranchName) String() string {
	return n.x
}
func (_BranchName__Prototype) fromString(w *_BranchName, v string) error {
	*w = _BranchName{v}
	return nil
}
func (_BranchName__Prototype) FromString(v string) (BranchName, error) {
	n := _BranchName{v}
	return &n, nil
}

type _BranchName__Maybe struct {
	m schema.Maybe
	v _BranchName
}
type MaybeBranchName = *_BranchName__Maybe

func (m MaybeBranchName) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeBranchName) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeBranchName) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeBranchName) AsNode() ipld.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return ipld.Absent
	case schema.Maybe_Null:
		return ipld.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeBranchName) Must() BranchName {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ ipld.Node = (BranchName)(&_BranchName{})
var _ schema.TypedNode = (BranchName)(&_BranchName{})

func (BranchName) Kind() ipld.Kind {
	return ipld.Kind_String
}
func (BranchName) LookupByString(string) (ipld.Node, error) {
	return mixins.String{TypeName: "ipldswh.BranchName"}.LookupByString("")
}
func (BranchName) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.String{TypeName: "ipldswh.BranchName"}.LookupByNode(nil)
}
func (BranchName) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.String{TypeName: "ipldswh.BranchName"}.LookupByIndex(0)
}
func (BranchName) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.String{TypeName: "ipldswh.BranchName"}.LookupBySegment(seg)
}
func (BranchName) MapIterator() ipld.MapIterator {
	return nil
}
func (BranchName) ListIterator() ipld.ListIterator {
	return nil
}
func (BranchName) Length() int64 {
	return -1
}
func (BranchName) IsAbsent() bool {
	return false
}
func (BranchName) IsNull() bool {
	return false
}
func (BranchName) AsBool() (bool, error) {
	return mixins.String{TypeName: "ipldswh.BranchName"}.AsBool()
}
func (BranchName) AsInt() (int64, error) {
	return mixins.String{TypeName: "ipldswh.BranchName"}.AsInt()
}
func (BranchName) AsFloat() (float64, error) {
	return mixins.String{TypeName: "ipldswh.BranchName"}.AsFloat()
}
func (n BranchName) AsString() (string, error) {
	return n.x, nil
}
func (BranchName) AsBytes() ([]byte, error) {
	return mixins.String{TypeName: "ipldswh.BranchName"}.AsBytes()
}
func (BranchName) AsLink() (ipld.Link, error) {
	return mixins.String{TypeName: "ipldswh.BranchName"}.AsLink()
}
func (BranchName) Prototype() ipld.NodePrototype {
	return _BranchName__Prototype{}
}

type _BranchName__Prototype struct{}

func (_BranchName__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _BranchName__Builder
	nb.Reset()
	return &nb
}

type _BranchName__Builder struct {
	_BranchName__Assembler
}

func (nb *_BranchName__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_BranchName__Builder) Reset() {
	var w _BranchName
	var m schema.Maybe
	*nb = _BranchName__Builder{_BranchName__Assembler{w: &w, m: &m}}
}

type _BranchName__Assembler struct {
	w *_BranchName
	m *schema.Maybe
}

func (na *_BranchName__Assembler) reset() {}
func (_BranchName__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldswh.BranchName"}.BeginMap(0)
}
func (_BranchName__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldswh.BranchName"}.BeginList(0)
}
func (na *_BranchName__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.StringAssembler{TypeName: "ipldswh.BranchName"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_BranchName__Assembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "ipldswh.BranchName"}.AssignBool(false)
}
func (_BranchName__Assembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "ipldswh.BranchName"}.AssignInt(0)
}
func (_BranchName__Assembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "ipldswh.BranchName"}.AssignFloat(0)
}
func (na *_BranchName__Assembler) AssignString(v string) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_BranchName__Assembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "ipldswh.BranchName"}.AssignBytes(nil)
}
func (_BranchName__Assembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{TypeName: "ipldswh.BranchName"}.AssignLink(nil)
}
func (na *_BranchName__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_BranchName); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return na.AssignString(v2)
	}
}
func (_BranchName__Assembler) Prototype() ipld.NodePrototype {
	return _BranchName__Prototype{}
}
func (BranchName) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n BranchName) Representation() ipld.Node {
	return (*_BranchName__Repr)(n)
}

type _BranchName__Repr = _BranchName

var _ ipld.Node = &_BranchName__Repr{}

type _BranchName__ReprPrototype = _BranchName__Prototype
type _BranchName__ReprAssembler = _BranchName__Assembler

func (n Link) Link() ipld.Link {
	return n.x
}
func (_Link__Prototype) FromLink(v ipld.Link) (Link, error) {
	n := _Link{v}
	return &n, nil
}

type _Link__Maybe struct {
	m schema.Maybe
	v _Link
}
type MaybeLink = *_Link__Maybe

func (m MaybeLink) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeLink) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeLink) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeLink) AsNode() ipld.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return ipld.Absent
	case schema.Maybe_Null:
		return ipld.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeLink) Must() Link {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ ipld.Node = (Link)(&_Link{})
var _ schema.TypedNode = (Link)(&_Link{})

func (Link) Kind() ipld.Kind {
	return ipld.Kind_Link
}
func (Link) LookupByString(string) (ipld.Node, error) {
	return mixins.Link{TypeName: "ipldswh.Link"}.LookupByString("")
}
func (Link) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.Link{TypeName: "ipldswh.Link"}.LookupByNode(nil)
}
func (Link) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Link{TypeName: "ipldswh.Link"}.LookupByIndex(0)
}
func (Link) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.Link{TypeName: "ipldswh.Link"}.LookupBySegment(seg)
}
func (Link) MapIterator() ipld.MapIterator {
	return nil
}
func (Link) ListIterator() ipld.ListIterator {
	return nil
}
func (Link) Length() int64 {
	return -1
}
func (Link) IsAbsent() bool {
	return false
}
func (Link) IsNull() bool {
	return false
}
func (Link) AsBool() (bool, error) {
	return mixins.Link{TypeName: "ipldswh.Link"}.AsBool()
}
func (Link) AsInt() (int64, error) {
	return mixins.Link{TypeName: "ipldswh.Link"}.AsInt()
}
func (Link) AsFloat() (float64, error) {
	return mixins.Link{TypeName: "ipldswh.Link"}.AsFloat()
}
func (Link) AsString() (string, error) {
	return mixins.Link{TypeName: "ipldswh.Link"}.AsString()
}
func (Link) AsBytes() ([]byte, error) {
	return mixins.Link{TypeName: "ipldswh.Link"}.AsBytes()
}
func (n Link) AsLink() (ipld.Link, error) {
	return n.x, nil
}
func (Link) Prototype() ipld.NodePrototype {
	return _Link__Prototype{}
}

type _Link__Prototype struct{}

func (_Link__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Link__Builder
	nb.Reset()
	return &nb
}

type _Link__Builder struct {
	_Link__Assembler
}

func (nb *_Link__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Link__Builder) Reset() {
	var w _Link
	var m schema.Maybe
	*nb = _Link__Builder{_Link__Assembler{w: &w, m: &m}}
}

type _Link__Assembler struct {
	w *_Link
	m *schema.Maybe
}

func (na *_Link__Assembler) reset() {}
func (_Link__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.LinkAssembler{TypeName: "ipldswh.Link"}.BeginMap(0)
}
func (_Link__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.LinkAssembler{TypeName: "ipldswh.Link"}.BeginList(0)
}
func (na *_Link__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.LinkAssembler{TypeName: "ipldswh.Link"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Link__Assembler) AssignBool(bool) error {
	return mixins.LinkAssembler{TypeName: "ipldswh.Link"}.AssignBool(false)
}
func (_Link__Assembler) AssignInt(int64) error {
	return mixins.LinkAssembler{TypeName: "ipldswh.Link"}.AssignInt(0)
}
func (_Link__Assembler) AssignFloat(float64) error {
	return mixins.LinkAssembler{TypeName: "ipldswh.Link"}.AssignFloat(0)
}
func (_Link__Assembler) AssignString(string) error {
	return mixins.LinkAssembler{TypeName: "ipldswh.Link"}.AssignString("")
}
func (_Link__Assembler) AssignBytes([]byte) error {
	return mixins.LinkAssembler{TypeName: "ipldswh.Link"}.AssignBytes(nil)
}
func (na *_Link__Assembler) AssignLink(v ipld.Link) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (na *_Link__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Link); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsLink(); err != nil {
		return err
	} else {
		return na.AssignLink(v2)
	}
}
func (_Link__Assembler) Prototype() ipld.NodePrototype {
	return _Link__Prototype{}
}
func (Link) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Link) Representation() ipld.Node {
	return (*_Link__Repr)(n)
}

type _Link__Repr = _Link

var _ ipld.Node = &_Link__Repr{}

type _Link__ReprPrototype = _Link__Prototype
type _Link__ReprAssembler = _Link__Assembler

func (n *_Snapshot) Lookup(k BranchName) SnapshotBranch {
	v, exists := n.m[*k]
	if !exists {
		return nil
	}
	return v
}
func (n *_Snapshot) LookupMaybe(k BranchName) MaybeSnapshotBranch {
	v, exists := n.m[*k]
	if !exists {
		return &_Snapshot__valueAbsent
	}
	return &_SnapshotBranch__Maybe{
		m: schema.Maybe_Value,
		v: v,
	}
}

var _Snapshot__valueAbsent = _SnapshotBranch__Maybe{m: schema.Maybe_Absent}

func (n Snapshot) Iterator() *Snapshot__Itr {
	return &Snapshot__Itr{n, 0}
}

type Snapshot__Itr struct {
	n   Snapshot
	idx int
}

func (itr *Snapshot__Itr) Next() (k BranchName, v SnapshotBranch) {
	if itr.idx >= len(itr.n.t) {
		return nil, nil
	}
	x := &itr.n.t[itr.idx]
	k = &x.k
	v = &x.v
	itr.idx++
	return
}
func (itr *Snapshot__Itr) Done() bool {
	return itr.idx >= len(itr.n.t)
}

type _Snapshot__Maybe struct {
	m schema.Maybe
	v _Snapshot
}
type MaybeSnapshot = *_Snapshot__Maybe

func (m MaybeSnapshot) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeSnapshot) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeSnapshot) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeSnapshot) AsNode() ipld.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return ipld.Absent
	case schema.Maybe_Null:
		return ipld.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeSnapshot) Must() Snapshot {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ ipld.Node = (Snapshot)(&_Snapshot{})
var _ schema.TypedNode = (Snapshot)(&_Snapshot{})

func (Snapshot) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n Snapshot) LookupByString(k string) (ipld.Node, error) {
	var k2 _BranchName
	if err := (_BranchName__Prototype{}).fromString(&k2, k); err != nil {
		return nil, err // TODO wrap in some kind of ErrInvalidKey
	}
	v, exists := n.m[k2]
	if !exists {
		return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(k)}
	}
	return v, nil
}
func (n Snapshot) LookupByNode(k ipld.Node) (ipld.Node, error) {
	k2, ok := k.(BranchName)
	if !ok {
		panic("todo invalid key type error")
		// 'ipld.ErrInvalidKey{TypeName:"ipldswh.Snapshot", Key:&_String{k}}' doesn't quite cut it: need room to explain the type, and it's not guaranteed k can be turned into a string at all
	}
	v, exists := n.m[*k2]
	if !exists {
		return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(k2.String())}
	}
	return v, nil
}
func (Snapshot) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{TypeName: "ipldswh.Snapshot"}.LookupByIndex(0)
}
func (n Snapshot) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n Snapshot) MapIterator() ipld.MapIterator {
	return &_Snapshot__MapItr{n, 0}
}

type _Snapshot__MapItr struct {
	n   Snapshot
	idx int
}

func (itr *_Snapshot__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= len(itr.n.t) {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	x := &itr.n.t[itr.idx]
	k = &x.k
	v = &x.v
	itr.idx++
	return
}
func (itr *_Snapshot__MapItr) Done() bool {
	return itr.idx >= len(itr.n.t)
}

func (Snapshot) ListIterator() ipld.ListIterator {
	return nil
}
func (n Snapshot) Length() int64 {
	return int64(len(n.t))
}
func (Snapshot) IsAbsent() bool {
	return false
}
func (Snapshot) IsNull() bool {
	return false
}
func (Snapshot) AsBool() (bool, error) {
	return mixins.Map{TypeName: "ipldswh.Snapshot"}.AsBool()
}
func (Snapshot) AsInt() (int64, error) {
	return mixins.Map{TypeName: "ipldswh.Snapshot"}.AsInt()
}
func (Snapshot) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "ipldswh.Snapshot"}.AsFloat()
}
func (Snapshot) AsString() (string, error) {
	return mixins.Map{TypeName: "ipldswh.Snapshot"}.AsString()
}
func (Snapshot) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "ipldswh.Snapshot"}.AsBytes()
}
func (Snapshot) AsLink() (ipld.Link, error) {
	return mixins.Map{TypeName: "ipldswh.Snapshot"}.AsLink()
}
func (Snapshot) Prototype() ipld.NodePrototype {
	return _Snapshot__Prototype{}
}

type _Snapshot__Prototype struct{}

func (_Snapshot__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Snapshot__Builder
	nb.Reset()
	return &nb
}

type _Snapshot__Builder struct {
	_Snapshot__Assembler
}

func (nb *_Snapshot__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Snapshot__Builder) Reset() {
	var w _Snapshot
	var m schema.Maybe
	*nb = _Snapshot__Builder{_Snapshot__Assembler{w: &w, m: &m}}
}

type _Snapshot__Assembler struct {
	w     *_Snapshot
	m     *schema.Maybe
	state maState

	cm schema.Maybe
	ka _BranchName__Assembler
	va _SnapshotBranch__Assembler
}

func (na *_Snapshot__Assembler) reset() {
	na.state = maState_initial
	na.ka.reset()
	na.va.reset()
}
func (na *_Snapshot__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	na.w.m = make(map[_BranchName]*_SnapshotBranch, sizeHint)
	na.w.t = make([]_Snapshot__entry, 0, sizeHint)
	return na, nil
}
func (_Snapshot__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "ipldswh.Snapshot"}.BeginList(0)
}
func (na *_Snapshot__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "ipldswh.Snapshot"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Snapshot__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "ipldswh.Snapshot"}.AssignBool(false)
}
func (_Snapshot__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "ipldswh.Snapshot"}.AssignInt(0)
}
func (_Snapshot__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "ipldswh.Snapshot"}.AssignFloat(0)
}
func (_Snapshot__Assembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "ipldswh.Snapshot"}.AssignString("")
}
func (_Snapshot__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "ipldswh.Snapshot"}.AssignBytes(nil)
}
func (_Snapshot__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{TypeName: "ipldswh.Snapshot"}.AssignLink(nil)
}
func (na *_Snapshot__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Snapshot); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "ipldswh.Snapshot", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Snapshot__Assembler) Prototype() ipld.NodePrototype {
	return _Snapshot__Prototype{}
}
func (ma *_Snapshot__Assembler) keyFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:
		ma.ka.w = nil
		tz := &ma.w.t[len(ma.w.t)-1]
		ma.cm = schema.Maybe_Absent
		ma.state = maState_expectValue
		ma.w.m[tz.k] = &tz.v
		ma.va.w = &tz.v
		ma.va.m = &ma.cm
		ma.ka.reset()
		return true
	default:
		return false
	}
}
func (ma *_Snapshot__Assembler) valueFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:
		ma.va.w = nil
		ma.cm = schema.Maybe_Absent
		ma.state = maState_initial
		ma.va.reset()
		return true
	default:
		return false
	}
}
func (ma *_Snapshot__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}

	var k2 _BranchName
	if err := (_BranchName__Prototype{}).fromString(&k2, k); err != nil {
		return nil, err // TODO wrap in some kind of ErrInvalidKey
	}
	if _, exists := ma.w.m[k2]; exists {
		return nil, ipld.ErrRepeatedMapKey{Key: &k2}
	}
	ma.w.t = append(ma.w.t, _Snapshot__entry{k: k2})
	tz := &ma.w.t[len(ma.w.t)-1]
	ma.state = maState_midValue

	ma.w.m[k2] = &tz.v
	ma.va.w = &tz.v
	ma.va.m = &ma.cm
	return &ma.va, nil
}
func (ma *_Snapshot__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.w.t = append(ma.w.t, _Snapshot__entry{})
	ma.state = maState_midKey
	ma.ka.m = &ma.cm
	ma.ka.w = &ma.w.t[len(ma.w.t)-1].k
	return &ma.ka
}
func (ma *_Snapshot__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		if !ma.keyFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
		} // if tidy success: carry on
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	return &ma.va
}
func (ma *_Snapshot__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Snapshot__Assembler) KeyPrototype() ipld.NodePrototype {
	return _BranchName__Prototype{}
}
func (ma *_Snapshot__Assembler) ValuePrototype(_ string) ipld.NodePrototype {
	return _SnapshotBranch__Prototype{}
}
func (Snapshot) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Snapshot) Representation() ipld.Node {
	return (*_Snapshot__Repr)(n)
}

type _Snapshot__Repr _Snapshot

var _ ipld.Node = &_Snapshot__Repr{}

func (_Snapshot__Repr) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (nr *_Snapshot__Repr) LookupByString(k string) (ipld.Node, error) {
	v, err := (Snapshot)(nr).LookupByString(k)
	if err != nil || v == ipld.Null {
		return v, err
	}
	return v.(SnapshotBranch).Representation(), nil
}
func (nr *_Snapshot__Repr) LookupByNode(k ipld.Node) (ipld.Node, error) {
	v, err := (Snapshot)(nr).LookupByNode(k)
	if err != nil || v == ipld.Null {
		return v, err
	}
	return v.(SnapshotBranch).Representation(), nil
}
func (_Snapshot__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{TypeName: "ipldswh.Snapshot.Repr"}.LookupByIndex(0)
}
func (n _Snapshot__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (nr *_Snapshot__Repr) MapIterator() ipld.MapIterator {
	return &_Snapshot__ReprMapItr{(Snapshot)(nr), 0}
}

type _Snapshot__ReprMapItr _Snapshot__MapItr

func (itr *_Snapshot__ReprMapItr) Next() (k ipld.Node, v ipld.Node, err error) {
	k, v, err = (*_Snapshot__MapItr)(itr).Next()
	if err != nil || v == ipld.Null {
		return
	}
	return k, v.(SnapshotBranch).Representation(), nil
}
func (itr *_Snapshot__ReprMapItr) Done() bool {
	return (*_Snapshot__MapItr)(itr).Done()
}

func (_Snapshot__Repr) ListIterator() ipld.ListIterator {
	return nil
}
func (rn *_Snapshot__Repr) Length() int64 {
	return int64(len(rn.t))
}
func (_Snapshot__Repr) IsAbsent() bool {
	return false
}
func (_Snapshot__Repr) IsNull() bool {
	return false
}
func (_Snapshot__Repr) AsBool() (bool, error) {
	return mixins.Map{TypeName: "ipldswh.Snapshot.Repr"}.AsBool()
}
func (_Snapshot__Repr) AsInt() (int64, error) {
	return mixins.Map{TypeName: "ipldswh.Snapshot.Repr"}.AsInt()
}
func (_Snapshot__Repr) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "ipldswh.Snapshot.Repr"}.AsFloat()
}
func (_Snapshot__Repr) AsString() (string, error) {
	return mixins.Map{TypeName: "ipldswh.Snapshot.Repr"}.AsString()
}
func (_Snapshot__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "ipldswh.Snapshot.Repr"}.AsBytes()
}
func (_Snapshot__Repr) AsLink() (ipld.Link, error) {
	return mixins.Map{TypeName: "ipldswh.Snapshot.Repr"}.AsLink()
}
func (_Snapshot__Repr) Prototype() ipld.NodePrototype {
	return _Snapshot__ReprPrototype{}
}

type _Snapshot__ReprPrototype struct{}

func (_Snapshot__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _Snapshot__ReprBuilder
	nb.Reset()
	return &nb
}

type _Snapshot__ReprBuilder struct {
	_Snapshot__ReprAssembler
}

func (nb *_Snapshot__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Snapshot__ReprBuilder) Reset() {
	var w _Snapshot
	var m schema.Maybe
	*nb = _Snapshot__ReprBuilder{_Snapshot__ReprAssembler{w: &w, m: &m}}
}

type _Snapshot__ReprAssembler struct {
	w     *_Snapshot
	m     *schema.Maybe
	state maState

	cm schema.Maybe
	ka _BranchName__ReprAssembler
	va _SnapshotBranch__ReprAssembler
}

func (na *_Snapshot__ReprAssembler) reset() {
	na.state = maState_initial
	na.ka.reset()
	na.va.reset()
}
func (na *_Snapshot__ReprAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	na.w.m = make(map[_BranchName]*_SnapshotBranch, sizeHint)
	na.w.t = make([]_Snapshot__entry, 0, sizeHint)
	return na, nil
}
func (_Snapshot__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "ipldswh.Snapshot.Repr"}.BeginList(0)
}
func (na *_Snapshot__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "ipldswh.Snapshot.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Snapshot__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "ipldswh.Snapshot.Repr"}.AssignBool(false)
}
func (_Snapshot__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "ipldswh.Snapshot.Repr"}.AssignInt(0)
}
func (_Snapshot__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "ipldswh.Snapshot.Repr"}.AssignFloat(0)
}
func (_Snapshot__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "ipldswh.Snapshot.Repr"}.AssignString("")
}
func (_Snapshot__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "ipldswh.Snapshot.Repr"}.AssignBytes(nil)
}
func (_Snapshot__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{TypeName: "ipldswh.Snapshot.Repr"}.AssignLink(nil)
}
func (na *_Snapshot__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Snapshot); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "ipldswh.Snapshot.Repr", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Snapshot__ReprAssembler) Prototype() ipld.NodePrototype {
	return _Snapshot__ReprPrototype{}
}
func (ma *_Snapshot__ReprAssembler) keyFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:
		ma.ka.w = nil
		tz := &ma.w.t[len(ma.w.t)-1]
		ma.cm = schema.Maybe_Absent
		ma.state = maState_expectValue
		ma.w.m[tz.k] = &tz.v
		ma.va.w = &tz.v
		ma.va.m = &ma.cm
		ma.ka.reset()
		return true
	default:
		return false
	}
}
func (ma *_Snapshot__ReprAssembler) valueFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:
		ma.va.w = nil
		ma.cm = schema.Maybe_Absent
		ma.state = maState_initial
		ma.va.reset()
		return true
	default:
		return false
	}
}
func (ma *_Snapshot__ReprAssembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}

	var k2 _BranchName
	if err := (_BranchName__ReprPrototype{}).fromString(&k2, k); err != nil {
		return nil, err // TODO wrap in some kind of ErrInvalidKey
	}
	if _, exists := ma.w.m[k2]; exists {
		return nil, ipld.ErrRepeatedMapKey{Key: &k2}
	}
	ma.w.t = append(ma.w.t, _Snapshot__entry{k: k2})
	tz := &ma.w.t[len(ma.w.t)-1]
	ma.state = maState_midValue

	ma.w.m[k2] = &tz.v
	ma.va.w = &tz.v
	ma.va.m = &ma.cm
	return &ma.va, nil
}
func (ma *_Snapshot__ReprAssembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.w.t = append(ma.w.t, _Snapshot__entry{})
	ma.state = maState_midKey
	ma.ka.m = &ma.cm
	ma.ka.w = &ma.w.t[len(ma.w.t)-1].k
	return &ma.ka
}
func (ma *_Snapshot__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		if !ma.keyFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
		} // if tidy success: carry on
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	return &ma.va
}
func (ma *_Snapshot__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Snapshot__ReprAssembler) KeyPrototype() ipld.NodePrototype {
	return _BranchName__ReprPrototype{}
}
func (ma *_Snapshot__ReprAssembler) ValuePrototype(_ string) ipld.NodePrototype {
	return _SnapshotBranch__ReprPrototype{}
}

func (n _SnapshotBranch) AsInterface() _SnapshotBranch__iface {
	switch n.tag {
	case 1:
		return &n.x1
	case 2:
		return &n.x2
	case 3:
		return &n.x3
	case 4:
		return &n.x4
	case 5:
		return &n.x5
	case 6:
		return &n.x6
	default:
		panic("invalid union state; how did you create this object?")
	}
}

type _SnapshotBranch__Maybe struct {
	m schema.Maybe
	v SnapshotBranch
}
type MaybeSnapshotBranch = *_SnapshotBranch__Maybe

func (m MaybeSnapshotBranch) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeSnapshotBranch) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeSnapshotBranch) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeSnapshotBranch) AsNode() ipld.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return ipld.Absent
	case schema.Maybe_Null:
		return ipld.Null
	case schema.Maybe_Value:
		return m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeSnapshotBranch) Must() SnapshotBranch {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}

var (
	memberName__SnapshotBranch_SnapshotBranch_Content   = _String{"SnapshotBranch_Content"}
	memberName__SnapshotBranch_SnapshotBranch_Directory = _String{"SnapshotBranch_Directory"}
	memberName__SnapshotBranch_SnapshotBranch_Revision  = _String{"SnapshotBranch_Revision"}
	memberName__SnapshotBranch_SnapshotBranch_Release   = _String{"SnapshotBranch_Release"}
	memberName__SnapshotBranch_SnapshotBranch_Snapshot  = _String{"SnapshotBranch_Snapshot"}
	memberName__SnapshotBranch_SnapshotBranch_Alias     = _String{"SnapshotBranch_Alias"}
)
var _ ipld.Node = (SnapshotBranch)(&_SnapshotBranch{})
var _ schema.TypedNode = (SnapshotBranch)(&_SnapshotBranch{})

func (SnapshotBranch) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n SnapshotBranch) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "SnapshotBranch_Content":
		if n.tag != 1 {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
		return &n.x1, nil
	case "SnapshotBranch_Directory":
		if n.tag != 2 {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
		return &n.x2, nil
	case "SnapshotBranch_Revision":
		if n.tag != 3 {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
		return &n.x3, nil
	case "SnapshotBranch_Release":
		if n.tag != 4 {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
		return &n.x4, nil
	case "SnapshotBranch_Snapshot":
		if n.tag != 5 {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
		return &n.x5, nil
	case "SnapshotBranch_Alias":
		if n.tag != 6 {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
		return &n.x6, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n SnapshotBranch) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (SnapshotBranch) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch"}.LookupByIndex(0)
}
func (n SnapshotBranch) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n SnapshotBranch) MapIterator() ipld.MapIterator {
	return &_SnapshotBranch__MapItr{n, false}
}

type _SnapshotBranch__MapItr struct {
	n    SnapshotBranch
	done bool
}

func (itr *_SnapshotBranch__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.done {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.n.tag {
	case 1:
		k, v = &memberName__SnapshotBranch_SnapshotBranch_Content, &itr.n.x1
	case 2:
		k, v = &memberName__SnapshotBranch_SnapshotBranch_Directory, &itr.n.x2
	case 3:
		k, v = &memberName__SnapshotBranch_SnapshotBranch_Revision, &itr.n.x3
	case 4:
		k, v = &memberName__SnapshotBranch_SnapshotBranch_Release, &itr.n.x4
	case 5:
		k, v = &memberName__SnapshotBranch_SnapshotBranch_Snapshot, &itr.n.x5
	case 6:
		k, v = &memberName__SnapshotBranch_SnapshotBranch_Alias, &itr.n.x6
	default:
		panic("unreachable")
	}
	itr.done = true
	return
}
func (itr *_SnapshotBranch__MapItr) Done() bool {
	return itr.done
}

func (SnapshotBranch) ListIterator() ipld.ListIterator {
	return nil
}
func (SnapshotBranch) Length() int64 {
	return 1
}
func (SnapshotBranch) IsAbsent() bool {
	return false
}
func (SnapshotBranch) IsNull() bool {
	return false
}
func (SnapshotBranch) AsBool() (bool, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch"}.AsBool()
}
func (SnapshotBranch) AsInt() (int64, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch"}.AsInt()
}
func (SnapshotBranch) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch"}.AsFloat()
}
func (SnapshotBranch) AsString() (string, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch"}.AsString()
}
func (SnapshotBranch) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch"}.AsBytes()
}
func (SnapshotBranch) AsLink() (ipld.Link, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch"}.AsLink()
}
func (SnapshotBranch) Prototype() ipld.NodePrototype {
	return _SnapshotBranch__Prototype{}
}

type _SnapshotBranch__Prototype struct{}

func (_SnapshotBranch__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _SnapshotBranch__Builder
	nb.Reset()
	return &nb
}

type _SnapshotBranch__Builder struct {
	_SnapshotBranch__Assembler
}

func (nb *_SnapshotBranch__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_SnapshotBranch__Builder) Reset() {
	var w _SnapshotBranch
	var m schema.Maybe
	*nb = _SnapshotBranch__Builder{_SnapshotBranch__Assembler{w: &w, m: &m}}
}

type _SnapshotBranch__Assembler struct {
	w     *_SnapshotBranch
	m     *schema.Maybe
	state maState

	cm  schema.Maybe
	ca1 _SnapshotBranch_Content__Assembler

	ca2 _SnapshotBranch_Directory__Assembler

	ca3 _SnapshotBranch_Revision__Assembler

	ca4 _SnapshotBranch_Release__Assembler

	ca5 _SnapshotBranch_Snapshot__Assembler

	ca6 _SnapshotBranch_Alias__Assembler
	ca  uint
}

func (na *_SnapshotBranch__Assembler) reset() {
	na.state = maState_initial
	switch na.ca {
	case 0:
		return
	case 1:
		na.ca1.reset()

	case 2:
		na.ca2.reset()

	case 3:
		na.ca3.reset()

	case 4:
		na.ca4.reset()

	case 5:
		na.ca5.reset()

	case 6:
		na.ca6.reset()
	default:
		panic("unreachable")
	}
	na.ca = 0
	na.cm = schema.Maybe_Absent
}
func (na *_SnapshotBranch__Assembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_SnapshotBranch{}
	}
	return na, nil
}
func (_SnapshotBranch__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch"}.BeginList(0)
}
func (na *_SnapshotBranch__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_SnapshotBranch__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch"}.AssignBool(false)
}
func (_SnapshotBranch__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch"}.AssignInt(0)
}
func (_SnapshotBranch__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch"}.AssignFloat(0)
}
func (_SnapshotBranch__Assembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch"}.AssignString("")
}
func (_SnapshotBranch__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch"}.AssignBytes(nil)
}
func (_SnapshotBranch__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch"}.AssignLink(nil)
}
func (na *_SnapshotBranch__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_SnapshotBranch); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "ipldswh.SnapshotBranch", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_SnapshotBranch__Assembler) Prototype() ipld.NodePrototype {
	return _SnapshotBranch__Prototype{}
}
func (ma *_SnapshotBranch__Assembler) valueFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:
		ma.state = maState_initial
		return true
	default:
		return false
	}
}
func (ma *_SnapshotBranch__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly.
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	if ma.ca != 0 {
		return nil, schema.ErrNotUnionStructure{TypeName: "ipldswh.SnapshotBranch", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "SnapshotBranch_Content":
		ma.state = maState_midValue
		ma.ca = 1
		ma.w.tag = 1
		ma.ca1.w = &ma.w.x1
		ma.ca1.m = &ma.cm
		return &ma.ca1, nil
	case "SnapshotBranch_Directory":
		ma.state = maState_midValue
		ma.ca = 2
		ma.w.tag = 2
		ma.ca2.w = &ma.w.x2
		ma.ca2.m = &ma.cm
		return &ma.ca2, nil
	case "SnapshotBranch_Revision":
		ma.state = maState_midValue
		ma.ca = 3
		ma.w.tag = 3
		ma.ca3.w = &ma.w.x3
		ma.ca3.m = &ma.cm
		return &ma.ca3, nil
	case "SnapshotBranch_Release":
		ma.state = maState_midValue
		ma.ca = 4
		ma.w.tag = 4
		ma.ca4.w = &ma.w.x4
		ma.ca4.m = &ma.cm
		return &ma.ca4, nil
	case "SnapshotBranch_Snapshot":
		ma.state = maState_midValue
		ma.ca = 5
		ma.w.tag = 5
		ma.ca5.w = &ma.w.x5
		ma.ca5.m = &ma.cm
		return &ma.ca5, nil
	case "SnapshotBranch_Alias":
		ma.state = maState_midValue
		ma.ca = 6
		ma.w.tag = 6
		ma.ca6.w = &ma.w.x6
		ma.ca6.m = &ma.cm
		return &ma.ca6, nil
	}
	return nil, ipld.ErrInvalidKey{TypeName: "ipldswh.SnapshotBranch", Key: &_String{k}}
}
func (ma *_SnapshotBranch__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly... or rather, the keyassembler will be.
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_SnapshotBranch__KeyAssembler)(ma)
}
func (ma *_SnapshotBranch__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.ca {
	case 0:
		ma.ca1.w = &ma.w.x1
		ma.ca1.m = &ma.cm
		return &ma.ca1
	case 1:
		ma.ca2.w = &ma.w.x2
		ma.ca2.m = &ma.cm
		return &ma.ca2
	case 2:
		ma.ca3.w = &ma.w.x3
		ma.ca3.m = &ma.cm
		return &ma.ca3
	case 3:
		ma.ca4.w = &ma.w.x4
		ma.ca4.m = &ma.cm
		return &ma.ca4
	case 4:
		ma.ca5.w = &ma.w.x5
		ma.ca5.m = &ma.cm
		return &ma.ca5
	case 5:
		ma.ca6.w = &ma.w.x6
		ma.ca6.m = &ma.cm
		return &ma.ca6
	default:
		panic("unreachable")
	}
}
func (ma *_SnapshotBranch__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.ca == 0 {
		return schema.ErrNotUnionStructure{TypeName: "ipldswh.SnapshotBranch", Detail: "a union must have exactly one entry (not none)!"}
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_SnapshotBranch__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_SnapshotBranch__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	switch k {
	case "SnapshotBranch_Content":
		return _SnapshotBranch_Content__Prototype{}
	case "SnapshotBranch_Directory":
		return _SnapshotBranch_Directory__Prototype{}
	case "SnapshotBranch_Revision":
		return _SnapshotBranch_Revision__Prototype{}
	case "SnapshotBranch_Release":
		return _SnapshotBranch_Release__Prototype{}
	case "SnapshotBranch_Snapshot":
		return _SnapshotBranch_Snapshot__Prototype{}
	case "SnapshotBranch_Alias":
		return _SnapshotBranch_Alias__Prototype{}
	default:
		return nil
	}
}

type _SnapshotBranch__KeyAssembler _SnapshotBranch__Assembler

func (_SnapshotBranch__KeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch.KeyAssembler"}.BeginMap(0)
}
func (_SnapshotBranch__KeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch.KeyAssembler"}.BeginList(0)
}
func (na *_SnapshotBranch__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch.KeyAssembler"}.AssignNull()
}
func (_SnapshotBranch__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch.KeyAssembler"}.AssignBool(false)
}
func (_SnapshotBranch__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch.KeyAssembler"}.AssignInt(0)
}
func (_SnapshotBranch__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch.KeyAssembler"}.AssignFloat(0)
}
func (ka *_SnapshotBranch__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	if ka.ca != 0 {
		return schema.ErrNotUnionStructure{TypeName: "ipldswh.SnapshotBranch", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "SnapshotBranch_Content":
		ka.ca = 1
		ka.w.tag = 1
		ka.state = maState_expectValue
		return nil
	case "SnapshotBranch_Directory":
		ka.ca = 2
		ka.w.tag = 2
		ka.state = maState_expectValue
		return nil
	case "SnapshotBranch_Revision":
		ka.ca = 3
		ka.w.tag = 3
		ka.state = maState_expectValue
		return nil
	case "SnapshotBranch_Release":
		ka.ca = 4
		ka.w.tag = 4
		ka.state = maState_expectValue
		return nil
	case "SnapshotBranch_Snapshot":
		ka.ca = 5
		ka.w.tag = 5
		ka.state = maState_expectValue
		return nil
	case "SnapshotBranch_Alias":
		ka.ca = 6
		ka.w.tag = 6
		ka.state = maState_expectValue
		return nil
	}
	return ipld.ErrInvalidKey{TypeName: "ipldswh.SnapshotBranch", Key: &_String{k}} // TODO: error quality: ErrInvalidUnionDiscriminant ?
}
func (_SnapshotBranch__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch.KeyAssembler"}.AssignBytes(nil)
}
func (_SnapshotBranch__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch.KeyAssembler"}.AssignLink(nil)
}
func (ka *_SnapshotBranch__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_SnapshotBranch__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (SnapshotBranch) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n SnapshotBranch) Representation() ipld.Node {
	return (*_SnapshotBranch__Repr)(n)
}

type _SnapshotBranch__Repr _SnapshotBranch

var (
	memberName__SnapshotBranch_SnapshotBranch_Content_serial   = _String{"content"}
	memberName__SnapshotBranch_SnapshotBranch_Directory_serial = _String{"directory"}
	memberName__SnapshotBranch_SnapshotBranch_Revision_serial  = _String{"revision"}
	memberName__SnapshotBranch_SnapshotBranch_Release_serial   = _String{"release"}
	memberName__SnapshotBranch_SnapshotBranch_Snapshot_serial  = _String{"snapshot"}
	memberName__SnapshotBranch_SnapshotBranch_Alias_serial     = _String{"alias"}
)
var _ ipld.Node = &_SnapshotBranch__Repr{}

func (_SnapshotBranch__Repr) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n *_SnapshotBranch__Repr) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "content":
		if n.tag != 1 {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
		return n.x1.Representation(), nil
	case "directory":
		if n.tag != 2 {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
		return n.x2.Representation(), nil
	case "revision":
		if n.tag != 3 {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
		return n.x3.Representation(), nil
	case "release":
		if n.tag != 4 {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
		return n.x4.Representation(), nil
	case "snapshot":
		if n.tag != 5 {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
		return n.x5.Representation(), nil
	case "alias":
		if n.tag != 6 {
			return nil, ipld.ErrNotExists{Segment: ipld.PathSegmentOfString(key)}
		}
		return n.x6.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n *_SnapshotBranch__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_SnapshotBranch__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch.Repr"}.LookupByIndex(0)
}
func (n _SnapshotBranch__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_SnapshotBranch__Repr) MapIterator() ipld.MapIterator {
	return &_SnapshotBranch__ReprMapItr{n, false}
}

type _SnapshotBranch__ReprMapItr struct {
	n    *_SnapshotBranch__Repr
	done bool
}

func (itr *_SnapshotBranch__ReprMapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.done {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.n.tag {
	case 1:
		k, v = &memberName__SnapshotBranch_SnapshotBranch_Content_serial, itr.n.x1.Representation()
	case 2:
		k, v = &memberName__SnapshotBranch_SnapshotBranch_Directory_serial, itr.n.x2.Representation()
	case 3:
		k, v = &memberName__SnapshotBranch_SnapshotBranch_Revision_serial, itr.n.x3.Representation()
	case 4:
		k, v = &memberName__SnapshotBranch_SnapshotBranch_Release_serial, itr.n.x4.Representation()
	case 5:
		k, v = &memberName__SnapshotBranch_SnapshotBranch_Snapshot_serial, itr.n.x5.Representation()
	case 6:
		k, v = &memberName__SnapshotBranch_SnapshotBranch_Alias_serial, itr.n.x6.Representation()
	default:
		panic("unreachable")
	}
	itr.done = true
	return
}
func (itr *_SnapshotBranch__ReprMapItr) Done() bool {
	return itr.done
}

func (_SnapshotBranch__Repr) ListIterator() ipld.ListIterator {
	return nil
}
func (_SnapshotBranch__Repr) Length() int64 {
	return 1
}
func (_SnapshotBranch__Repr) IsAbsent() bool {
	return false
}
func (_SnapshotBranch__Repr) IsNull() bool {
	return false
}
func (_SnapshotBranch__Repr) AsBool() (bool, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch.Repr"}.AsBool()
}
func (_SnapshotBranch__Repr) AsInt() (int64, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch.Repr"}.AsInt()
}
func (_SnapshotBranch__Repr) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch.Repr"}.AsFloat()
}
func (_SnapshotBranch__Repr) AsString() (string, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch.Repr"}.AsString()
}
func (_SnapshotBranch__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch.Repr"}.AsBytes()
}
func (_SnapshotBranch__Repr) AsLink() (ipld.Link, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch.Repr"}.AsLink()
}
func (_SnapshotBranch__Repr) Prototype() ipld.NodePrototype {
	return _SnapshotBranch__ReprPrototype{}
}

type _SnapshotBranch__ReprPrototype struct{}

func (_SnapshotBranch__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _SnapshotBranch__ReprBuilder
	nb.Reset()
	return &nb
}

type _SnapshotBranch__ReprBuilder struct {
	_SnapshotBranch__ReprAssembler
}

func (nb *_SnapshotBranch__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_SnapshotBranch__ReprBuilder) Reset() {
	var w _SnapshotBranch
	var m schema.Maybe
	*nb = _SnapshotBranch__ReprBuilder{_SnapshotBranch__ReprAssembler{w: &w, m: &m}}
}

type _SnapshotBranch__ReprAssembler struct {
	w     *_SnapshotBranch
	m     *schema.Maybe
	state maState

	cm  schema.Maybe
	ca1 _SnapshotBranch_Content__ReprAssembler

	ca2 _SnapshotBranch_Directory__ReprAssembler

	ca3 _SnapshotBranch_Revision__ReprAssembler

	ca4 _SnapshotBranch_Release__ReprAssembler

	ca5 _SnapshotBranch_Snapshot__ReprAssembler

	ca6 _SnapshotBranch_Alias__ReprAssembler
	ca  uint
}

func (na *_SnapshotBranch__ReprAssembler) reset() {
	na.state = maState_initial
	switch na.ca {
	case 0:
		return
	case 1:
		na.ca1.reset()

	case 2:
		na.ca2.reset()

	case 3:
		na.ca3.reset()

	case 4:
		na.ca4.reset()

	case 5:
		na.ca5.reset()

	case 6:
		na.ca6.reset()
	default:
		panic("unreachable")
	}
	na.ca = 0
	na.cm = schema.Maybe_Absent
}
func (na *_SnapshotBranch__ReprAssembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_SnapshotBranch{}
	}
	return na, nil
}
func (_SnapshotBranch__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch.Repr"}.BeginList(0)
}
func (na *_SnapshotBranch__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_SnapshotBranch__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch.Repr"}.AssignBool(false)
}
func (_SnapshotBranch__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch.Repr"}.AssignInt(0)
}
func (_SnapshotBranch__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch.Repr"}.AssignFloat(0)
}
func (_SnapshotBranch__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch.Repr"}.AssignString("")
}
func (_SnapshotBranch__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch.Repr"}.AssignBytes(nil)
}
func (_SnapshotBranch__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch.Repr"}.AssignLink(nil)
}
func (na *_SnapshotBranch__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_SnapshotBranch); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "ipldswh.SnapshotBranch.Repr", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_SnapshotBranch__ReprAssembler) Prototype() ipld.NodePrototype {
	return _SnapshotBranch__ReprPrototype{}
}
func (ma *_SnapshotBranch__ReprAssembler) valueFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:
		ma.state = maState_initial
		return true
	default:
		return false
	}
}
func (ma *_SnapshotBranch__ReprAssembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly.
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	if ma.ca != 0 {
		return nil, schema.ErrNotUnionStructure{TypeName: "ipldswh.SnapshotBranch.Repr", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "content":
		ma.state = maState_midValue
		ma.ca = 1
		ma.w.tag = 1
		ma.ca1.w = &ma.w.x1
		ma.ca1.m = &ma.cm
		return &ma.ca1, nil
	case "directory":
		ma.state = maState_midValue
		ma.ca = 2
		ma.w.tag = 2
		ma.ca2.w = &ma.w.x2
		ma.ca2.m = &ma.cm
		return &ma.ca2, nil
	case "revision":
		ma.state = maState_midValue
		ma.ca = 3
		ma.w.tag = 3
		ma.ca3.w = &ma.w.x3
		ma.ca3.m = &ma.cm
		return &ma.ca3, nil
	case "release":
		ma.state = maState_midValue
		ma.ca = 4
		ma.w.tag = 4
		ma.ca4.w = &ma.w.x4
		ma.ca4.m = &ma.cm
		return &ma.ca4, nil
	case "snapshot":
		ma.state = maState_midValue
		ma.ca = 5
		ma.w.tag = 5
		ma.ca5.w = &ma.w.x5
		ma.ca5.m = &ma.cm
		return &ma.ca5, nil
	case "alias":
		ma.state = maState_midValue
		ma.ca = 6
		ma.w.tag = 6
		ma.ca6.w = &ma.w.x6
		ma.ca6.m = &ma.cm
		return &ma.ca6, nil
	}
	return nil, ipld.ErrInvalidKey{TypeName: "ipldswh.SnapshotBranch.Repr", Key: &_String{k}}
}
func (ma *_SnapshotBranch__ReprAssembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly... or rather, the keyassembler will be.
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_SnapshotBranch__ReprKeyAssembler)(ma)
}
func (ma *_SnapshotBranch__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.ca {
	case 0:
		ma.ca1.w = &ma.w.x1
		ma.ca1.m = &ma.cm
		return &ma.ca1
	case 1:
		ma.ca2.w = &ma.w.x2
		ma.ca2.m = &ma.cm
		return &ma.ca2
	case 2:
		ma.ca3.w = &ma.w.x3
		ma.ca3.m = &ma.cm
		return &ma.ca3
	case 3:
		ma.ca4.w = &ma.w.x4
		ma.ca4.m = &ma.cm
		return &ma.ca4
	case 4:
		ma.ca5.w = &ma.w.x5
		ma.ca5.m = &ma.cm
		return &ma.ca5
	case 5:
		ma.ca6.w = &ma.w.x6
		ma.ca6.m = &ma.cm
		return &ma.ca6
	default:
		panic("unreachable")
	}
}
func (ma *_SnapshotBranch__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.ca == 0 {
		return schema.ErrNotUnionStructure{TypeName: "ipldswh.SnapshotBranch.Repr", Detail: "a union must have exactly one entry (not none)!"}
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_SnapshotBranch__ReprAssembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_SnapshotBranch__ReprAssembler) ValuePrototype(k string) ipld.NodePrototype {
	switch k {
	case "SnapshotBranch_Content":
		return _SnapshotBranch_Content__ReprPrototype{}
	case "SnapshotBranch_Directory":
		return _SnapshotBranch_Directory__ReprPrototype{}
	case "SnapshotBranch_Revision":
		return _SnapshotBranch_Revision__ReprPrototype{}
	case "SnapshotBranch_Release":
		return _SnapshotBranch_Release__ReprPrototype{}
	case "SnapshotBranch_Snapshot":
		return _SnapshotBranch_Snapshot__ReprPrototype{}
	case "SnapshotBranch_Alias":
		return _SnapshotBranch_Alias__ReprPrototype{}
	default:
		return nil
	}
}

type _SnapshotBranch__ReprKeyAssembler _SnapshotBranch__ReprAssembler

func (_SnapshotBranch__ReprKeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch.Repr.KeyAssembler"}.BeginMap(0)
}
func (_SnapshotBranch__ReprKeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_SnapshotBranch__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch.Repr.KeyAssembler"}.AssignNull()
}
func (_SnapshotBranch__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch.Repr.KeyAssembler"}.AssignBool(false)
}
func (_SnapshotBranch__ReprKeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch.Repr.KeyAssembler"}.AssignInt(0)
}
func (_SnapshotBranch__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_SnapshotBranch__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	if ka.ca != 0 {
		return schema.ErrNotUnionStructure{TypeName: "ipldswh.SnapshotBranch.Repr", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "content":
		ka.ca = 1
		ka.w.tag = 1
		ka.state = maState_expectValue
		return nil
	case "directory":
		ka.ca = 2
		ka.w.tag = 2
		ka.state = maState_expectValue
		return nil
	case "revision":
		ka.ca = 3
		ka.w.tag = 3
		ka.state = maState_expectValue
		return nil
	case "release":
		ka.ca = 4
		ka.w.tag = 4
		ka.state = maState_expectValue
		return nil
	case "snapshot":
		ka.ca = 5
		ka.w.tag = 5
		ka.state = maState_expectValue
		return nil
	case "alias":
		ka.ca = 6
		ka.w.tag = 6
		ka.state = maState_expectValue
		return nil
	}
	return ipld.ErrInvalidKey{TypeName: "ipldswh.SnapshotBranch.Repr", Key: &_String{k}} // TODO: error quality: ErrInvalidUnionDiscriminant ?
}
func (_SnapshotBranch__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_SnapshotBranch__ReprKeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_SnapshotBranch__ReprKeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_SnapshotBranch__ReprKeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}

func (n _SnapshotBranch_Alias) FieldTarget() BranchName {
	return &n.target
}

type _SnapshotBranch_Alias__Maybe struct {
	m schema.Maybe
	v SnapshotBranch_Alias
}
type MaybeSnapshotBranch_Alias = *_SnapshotBranch_Alias__Maybe

func (m MaybeSnapshotBranch_Alias) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeSnapshotBranch_Alias) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeSnapshotBranch_Alias) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeSnapshotBranch_Alias) AsNode() ipld.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return ipld.Absent
	case schema.Maybe_Null:
		return ipld.Null
	case schema.Maybe_Value:
		return m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeSnapshotBranch_Alias) Must() SnapshotBranch_Alias {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}

var (
	fieldName__SnapshotBranch_Alias_Target = _String{"target"}
)
var _ ipld.Node = (SnapshotBranch_Alias)(&_SnapshotBranch_Alias{})
var _ schema.TypedNode = (SnapshotBranch_Alias)(&_SnapshotBranch_Alias{})

func (SnapshotBranch_Alias) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n SnapshotBranch_Alias) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "target":
		return &n.target, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n SnapshotBranch_Alias) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (SnapshotBranch_Alias) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Alias"}.LookupByIndex(0)
}
func (n SnapshotBranch_Alias) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n SnapshotBranch_Alias) MapIterator() ipld.MapIterator {
	return &_SnapshotBranch_Alias__MapItr{n, 0}
}

type _SnapshotBranch_Alias__MapItr struct {
	n   SnapshotBranch_Alias
	idx int
}

func (itr *_SnapshotBranch_Alias__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 1 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__SnapshotBranch_Alias_Target
		v = &itr.n.target
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_SnapshotBranch_Alias__MapItr) Done() bool {
	return itr.idx >= 1
}

func (SnapshotBranch_Alias) ListIterator() ipld.ListIterator {
	return nil
}
func (SnapshotBranch_Alias) Length() int64 {
	return 1
}
func (SnapshotBranch_Alias) IsAbsent() bool {
	return false
}
func (SnapshotBranch_Alias) IsNull() bool {
	return false
}
func (SnapshotBranch_Alias) AsBool() (bool, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Alias"}.AsBool()
}
func (SnapshotBranch_Alias) AsInt() (int64, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Alias"}.AsInt()
}
func (SnapshotBranch_Alias) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Alias"}.AsFloat()
}
func (SnapshotBranch_Alias) AsString() (string, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Alias"}.AsString()
}
func (SnapshotBranch_Alias) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Alias"}.AsBytes()
}
func (SnapshotBranch_Alias) AsLink() (ipld.Link, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Alias"}.AsLink()
}
func (SnapshotBranch_Alias) Prototype() ipld.NodePrototype {
	return _SnapshotBranch_Alias__Prototype{}
}

type _SnapshotBranch_Alias__Prototype struct{}

func (_SnapshotBranch_Alias__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _SnapshotBranch_Alias__Builder
	nb.Reset()
	return &nb
}

type _SnapshotBranch_Alias__Builder struct {
	_SnapshotBranch_Alias__Assembler
}

func (nb *_SnapshotBranch_Alias__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_SnapshotBranch_Alias__Builder) Reset() {
	var w _SnapshotBranch_Alias
	var m schema.Maybe
	*nb = _SnapshotBranch_Alias__Builder{_SnapshotBranch_Alias__Assembler{w: &w, m: &m}}
}

type _SnapshotBranch_Alias__Assembler struct {
	w     *_SnapshotBranch_Alias
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm        schema.Maybe
	ca_target _BranchName__Assembler
}

func (na *_SnapshotBranch_Alias__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_target.reset()
}

var (
	fieldBit__SnapshotBranch_Alias_Target      = 1 << 0
	fieldBits__SnapshotBranch_Alias_sufficient = 0 + 1<<0
)

func (na *_SnapshotBranch_Alias__Assembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_SnapshotBranch_Alias{}
	}
	return na, nil
}
func (_SnapshotBranch_Alias__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Alias"}.BeginList(0)
}
func (na *_SnapshotBranch_Alias__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Alias"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_SnapshotBranch_Alias__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Alias"}.AssignBool(false)
}
func (_SnapshotBranch_Alias__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Alias"}.AssignInt(0)
}
func (_SnapshotBranch_Alias__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Alias"}.AssignFloat(0)
}
func (_SnapshotBranch_Alias__Assembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Alias"}.AssignString("")
}
func (_SnapshotBranch_Alias__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Alias"}.AssignBytes(nil)
}
func (_SnapshotBranch_Alias__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Alias"}.AssignLink(nil)
}
func (na *_SnapshotBranch_Alias__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_SnapshotBranch_Alias); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "ipldswh.SnapshotBranch_Alias", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_SnapshotBranch_Alias__Assembler) Prototype() ipld.NodePrototype {
	return _SnapshotBranch_Alias__Prototype{}
}
func (ma *_SnapshotBranch_Alias__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_target.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_SnapshotBranch_Alias__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "target":
		if ma.s&fieldBit__SnapshotBranch_Alias_Target != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__SnapshotBranch_Alias_Target}
		}
		ma.s += fieldBit__SnapshotBranch_Alias_Target
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_target.w = &ma.w.target
		ma.ca_target.m = &ma.cm
		return &ma.ca_target, nil
	}
	return nil, ipld.ErrInvalidKey{TypeName: "ipldswh.SnapshotBranch_Alias", Key: &_String{k}}
}
func (ma *_SnapshotBranch_Alias__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_SnapshotBranch_Alias__KeyAssembler)(ma)
}
func (ma *_SnapshotBranch_Alias__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_target.w = &ma.w.target
		ma.ca_target.m = &ma.cm
		return &ma.ca_target
	default:
		panic("unreachable")
	}
}
func (ma *_SnapshotBranch_Alias__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__SnapshotBranch_Alias_sufficient != fieldBits__SnapshotBranch_Alias_sufficient {
		err := ipld.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__SnapshotBranch_Alias_Target == 0 {
			err.Missing = append(err.Missing, "target")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_SnapshotBranch_Alias__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_SnapshotBranch_Alias__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}

type _SnapshotBranch_Alias__KeyAssembler _SnapshotBranch_Alias__Assembler

func (_SnapshotBranch_Alias__KeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Alias.KeyAssembler"}.BeginMap(0)
}
func (_SnapshotBranch_Alias__KeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Alias.KeyAssembler"}.BeginList(0)
}
func (na *_SnapshotBranch_Alias__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Alias.KeyAssembler"}.AssignNull()
}
func (_SnapshotBranch_Alias__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Alias.KeyAssembler"}.AssignBool(false)
}
func (_SnapshotBranch_Alias__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Alias.KeyAssembler"}.AssignInt(0)
}
func (_SnapshotBranch_Alias__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Alias.KeyAssembler"}.AssignFloat(0)
}
func (ka *_SnapshotBranch_Alias__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "target":
		if ka.s&fieldBit__SnapshotBranch_Alias_Target != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__SnapshotBranch_Alias_Target}
		}
		ka.s += fieldBit__SnapshotBranch_Alias_Target
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	default:
		return ipld.ErrInvalidKey{TypeName: "ipldswh.SnapshotBranch_Alias", Key: &_String{k}}
	}
}
func (_SnapshotBranch_Alias__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Alias.KeyAssembler"}.AssignBytes(nil)
}
func (_SnapshotBranch_Alias__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Alias.KeyAssembler"}.AssignLink(nil)
}
func (ka *_SnapshotBranch_Alias__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_SnapshotBranch_Alias__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (SnapshotBranch_Alias) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n SnapshotBranch_Alias) Representation() ipld.Node {
	return (*_SnapshotBranch_Alias__Repr)(n)
}

type _SnapshotBranch_Alias__Repr _SnapshotBranch_Alias

var (
	fieldName__SnapshotBranch_Alias_Target_serial = _String{"target"}
)
var _ ipld.Node = &_SnapshotBranch_Alias__Repr{}

func (_SnapshotBranch_Alias__Repr) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n *_SnapshotBranch_Alias__Repr) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "target":
		return n.target.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n *_SnapshotBranch_Alias__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_SnapshotBranch_Alias__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Alias.Repr"}.LookupByIndex(0)
}
func (n _SnapshotBranch_Alias__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_SnapshotBranch_Alias__Repr) MapIterator() ipld.MapIterator {
	return &_SnapshotBranch_Alias__ReprMapItr{n, 0}
}

type _SnapshotBranch_Alias__ReprMapItr struct {
	n   *_SnapshotBranch_Alias__Repr
	idx int
}

func (itr *_SnapshotBranch_Alias__ReprMapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 1 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__SnapshotBranch_Alias_Target_serial
		v = itr.n.target.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_SnapshotBranch_Alias__ReprMapItr) Done() bool {
	return itr.idx >= 1
}
func (_SnapshotBranch_Alias__Repr) ListIterator() ipld.ListIterator {
	return nil
}
func (rn *_SnapshotBranch_Alias__Repr) Length() int64 {
	l := 1
	return int64(l)
}
func (_SnapshotBranch_Alias__Repr) IsAbsent() bool {
	return false
}
func (_SnapshotBranch_Alias__Repr) IsNull() bool {
	return false
}
func (_SnapshotBranch_Alias__Repr) AsBool() (bool, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Alias.Repr"}.AsBool()
}
func (_SnapshotBranch_Alias__Repr) AsInt() (int64, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Alias.Repr"}.AsInt()
}
func (_SnapshotBranch_Alias__Repr) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Alias.Repr"}.AsFloat()
}
func (_SnapshotBranch_Alias__Repr) AsString() (string, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Alias.Repr"}.AsString()
}
func (_SnapshotBranch_Alias__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Alias.Repr"}.AsBytes()
}
func (_SnapshotBranch_Alias__Repr) AsLink() (ipld.Link, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Alias.Repr"}.AsLink()
}
func (_SnapshotBranch_Alias__Repr) Prototype() ipld.NodePrototype {
	return _SnapshotBranch_Alias__ReprPrototype{}
}

type _SnapshotBranch_Alias__ReprPrototype struct{}

func (_SnapshotBranch_Alias__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _SnapshotBranch_Alias__ReprBuilder
	nb.Reset()
	return &nb
}

type _SnapshotBranch_Alias__ReprBuilder struct {
	_SnapshotBranch_Alias__ReprAssembler
}

func (nb *_SnapshotBranch_Alias__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_SnapshotBranch_Alias__ReprBuilder) Reset() {
	var w _SnapshotBranch_Alias
	var m schema.Maybe
	*nb = _SnapshotBranch_Alias__ReprBuilder{_SnapshotBranch_Alias__ReprAssembler{w: &w, m: &m}}
}

type _SnapshotBranch_Alias__ReprAssembler struct {
	w     *_SnapshotBranch_Alias
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm        schema.Maybe
	ca_target _BranchName__ReprAssembler
}

func (na *_SnapshotBranch_Alias__ReprAssembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_target.reset()
}
func (na *_SnapshotBranch_Alias__ReprAssembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_SnapshotBranch_Alias{}
	}
	return na, nil
}
func (_SnapshotBranch_Alias__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Alias.Repr"}.BeginList(0)
}
func (na *_SnapshotBranch_Alias__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Alias.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_SnapshotBranch_Alias__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Alias.Repr"}.AssignBool(false)
}
func (_SnapshotBranch_Alias__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Alias.Repr"}.AssignInt(0)
}
func (_SnapshotBranch_Alias__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Alias.Repr"}.AssignFloat(0)
}
func (_SnapshotBranch_Alias__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Alias.Repr"}.AssignString("")
}
func (_SnapshotBranch_Alias__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Alias.Repr"}.AssignBytes(nil)
}
func (_SnapshotBranch_Alias__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Alias.Repr"}.AssignLink(nil)
}
func (na *_SnapshotBranch_Alias__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_SnapshotBranch_Alias); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "ipldswh.SnapshotBranch_Alias.Repr", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_SnapshotBranch_Alias__ReprAssembler) Prototype() ipld.NodePrototype {
	return _SnapshotBranch_Alias__ReprPrototype{}
}
func (ma *_SnapshotBranch_Alias__ReprAssembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_SnapshotBranch_Alias__ReprAssembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "target":
		if ma.s&fieldBit__SnapshotBranch_Alias_Target != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__SnapshotBranch_Alias_Target_serial}
		}
		ma.s += fieldBit__SnapshotBranch_Alias_Target
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_target.w = &ma.w.target
		ma.ca_target.m = &ma.cm
		return &ma.ca_target, nil
	default:
	}
	return nil, ipld.ErrInvalidKey{TypeName: "ipldswh.SnapshotBranch_Alias.Repr", Key: &_String{k}}
}
func (ma *_SnapshotBranch_Alias__ReprAssembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_SnapshotBranch_Alias__ReprKeyAssembler)(ma)
}
func (ma *_SnapshotBranch_Alias__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_target.w = &ma.w.target
		ma.ca_target.m = &ma.cm
		return &ma.ca_target
	default:
		panic("unreachable")
	}
}
func (ma *_SnapshotBranch_Alias__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__SnapshotBranch_Alias_sufficient != fieldBits__SnapshotBranch_Alias_sufficient {
		err := ipld.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__SnapshotBranch_Alias_Target == 0 {
			err.Missing = append(err.Missing, "target")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_SnapshotBranch_Alias__ReprAssembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_SnapshotBranch_Alias__ReprAssembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler repr valueprototype")
}

type _SnapshotBranch_Alias__ReprKeyAssembler _SnapshotBranch_Alias__ReprAssembler

func (_SnapshotBranch_Alias__ReprKeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Alias.Repr.KeyAssembler"}.BeginMap(0)
}
func (_SnapshotBranch_Alias__ReprKeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Alias.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_SnapshotBranch_Alias__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Alias.Repr.KeyAssembler"}.AssignNull()
}
func (_SnapshotBranch_Alias__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Alias.Repr.KeyAssembler"}.AssignBool(false)
}
func (_SnapshotBranch_Alias__ReprKeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Alias.Repr.KeyAssembler"}.AssignInt(0)
}
func (_SnapshotBranch_Alias__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Alias.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_SnapshotBranch_Alias__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "target":
		if ka.s&fieldBit__SnapshotBranch_Alias_Target != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__SnapshotBranch_Alias_Target_serial}
		}
		ka.s += fieldBit__SnapshotBranch_Alias_Target
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	}
	return ipld.ErrInvalidKey{TypeName: "ipldswh.SnapshotBranch_Alias.Repr", Key: &_String{k}}
}
func (_SnapshotBranch_Alias__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Alias.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_SnapshotBranch_Alias__ReprKeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Alias.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_SnapshotBranch_Alias__ReprKeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_SnapshotBranch_Alias__ReprKeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}

func (n _SnapshotBranch_Content) FieldTarget() Link {
	return &n.target
}

type _SnapshotBranch_Content__Maybe struct {
	m schema.Maybe
	v SnapshotBranch_Content
}
type MaybeSnapshotBranch_Content = *_SnapshotBranch_Content__Maybe

func (m MaybeSnapshotBranch_Content) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeSnapshotBranch_Content) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeSnapshotBranch_Content) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeSnapshotBranch_Content) AsNode() ipld.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return ipld.Absent
	case schema.Maybe_Null:
		return ipld.Null
	case schema.Maybe_Value:
		return m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeSnapshotBranch_Content) Must() SnapshotBranch_Content {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}

var (
	fieldName__SnapshotBranch_Content_Target = _String{"target"}
)
var _ ipld.Node = (SnapshotBranch_Content)(&_SnapshotBranch_Content{})
var _ schema.TypedNode = (SnapshotBranch_Content)(&_SnapshotBranch_Content{})

func (SnapshotBranch_Content) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n SnapshotBranch_Content) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "target":
		return &n.target, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n SnapshotBranch_Content) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (SnapshotBranch_Content) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Content"}.LookupByIndex(0)
}
func (n SnapshotBranch_Content) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n SnapshotBranch_Content) MapIterator() ipld.MapIterator {
	return &_SnapshotBranch_Content__MapItr{n, 0}
}

type _SnapshotBranch_Content__MapItr struct {
	n   SnapshotBranch_Content
	idx int
}

func (itr *_SnapshotBranch_Content__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 1 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__SnapshotBranch_Content_Target
		v = &itr.n.target
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_SnapshotBranch_Content__MapItr) Done() bool {
	return itr.idx >= 1
}

func (SnapshotBranch_Content) ListIterator() ipld.ListIterator {
	return nil
}
func (SnapshotBranch_Content) Length() int64 {
	return 1
}
func (SnapshotBranch_Content) IsAbsent() bool {
	return false
}
func (SnapshotBranch_Content) IsNull() bool {
	return false
}
func (SnapshotBranch_Content) AsBool() (bool, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Content"}.AsBool()
}
func (SnapshotBranch_Content) AsInt() (int64, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Content"}.AsInt()
}
func (SnapshotBranch_Content) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Content"}.AsFloat()
}
func (SnapshotBranch_Content) AsString() (string, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Content"}.AsString()
}
func (SnapshotBranch_Content) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Content"}.AsBytes()
}
func (SnapshotBranch_Content) AsLink() (ipld.Link, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Content"}.AsLink()
}
func (SnapshotBranch_Content) Prototype() ipld.NodePrototype {
	return _SnapshotBranch_Content__Prototype{}
}

type _SnapshotBranch_Content__Prototype struct{}

func (_SnapshotBranch_Content__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _SnapshotBranch_Content__Builder
	nb.Reset()
	return &nb
}

type _SnapshotBranch_Content__Builder struct {
	_SnapshotBranch_Content__Assembler
}

func (nb *_SnapshotBranch_Content__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_SnapshotBranch_Content__Builder) Reset() {
	var w _SnapshotBranch_Content
	var m schema.Maybe
	*nb = _SnapshotBranch_Content__Builder{_SnapshotBranch_Content__Assembler{w: &w, m: &m}}
}

type _SnapshotBranch_Content__Assembler struct {
	w     *_SnapshotBranch_Content
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm        schema.Maybe
	ca_target _Link__Assembler
}

func (na *_SnapshotBranch_Content__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_target.reset()
}

var (
	fieldBit__SnapshotBranch_Content_Target      = 1 << 0
	fieldBits__SnapshotBranch_Content_sufficient = 0 + 1<<0
)

func (na *_SnapshotBranch_Content__Assembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_SnapshotBranch_Content{}
	}
	return na, nil
}
func (_SnapshotBranch_Content__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Content"}.BeginList(0)
}
func (na *_SnapshotBranch_Content__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Content"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_SnapshotBranch_Content__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Content"}.AssignBool(false)
}
func (_SnapshotBranch_Content__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Content"}.AssignInt(0)
}
func (_SnapshotBranch_Content__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Content"}.AssignFloat(0)
}
func (_SnapshotBranch_Content__Assembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Content"}.AssignString("")
}
func (_SnapshotBranch_Content__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Content"}.AssignBytes(nil)
}
func (_SnapshotBranch_Content__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Content"}.AssignLink(nil)
}
func (na *_SnapshotBranch_Content__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_SnapshotBranch_Content); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "ipldswh.SnapshotBranch_Content", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_SnapshotBranch_Content__Assembler) Prototype() ipld.NodePrototype {
	return _SnapshotBranch_Content__Prototype{}
}
func (ma *_SnapshotBranch_Content__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_target.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_SnapshotBranch_Content__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "target":
		if ma.s&fieldBit__SnapshotBranch_Content_Target != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__SnapshotBranch_Content_Target}
		}
		ma.s += fieldBit__SnapshotBranch_Content_Target
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_target.w = &ma.w.target
		ma.ca_target.m = &ma.cm
		return &ma.ca_target, nil
	}
	return nil, ipld.ErrInvalidKey{TypeName: "ipldswh.SnapshotBranch_Content", Key: &_String{k}}
}
func (ma *_SnapshotBranch_Content__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_SnapshotBranch_Content__KeyAssembler)(ma)
}
func (ma *_SnapshotBranch_Content__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_target.w = &ma.w.target
		ma.ca_target.m = &ma.cm
		return &ma.ca_target
	default:
		panic("unreachable")
	}
}
func (ma *_SnapshotBranch_Content__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__SnapshotBranch_Content_sufficient != fieldBits__SnapshotBranch_Content_sufficient {
		err := ipld.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__SnapshotBranch_Content_Target == 0 {
			err.Missing = append(err.Missing, "target")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_SnapshotBranch_Content__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_SnapshotBranch_Content__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}

type _SnapshotBranch_Content__KeyAssembler _SnapshotBranch_Content__Assembler

func (_SnapshotBranch_Content__KeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Content.KeyAssembler"}.BeginMap(0)
}
func (_SnapshotBranch_Content__KeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Content.KeyAssembler"}.BeginList(0)
}
func (na *_SnapshotBranch_Content__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Content.KeyAssembler"}.AssignNull()
}
func (_SnapshotBranch_Content__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Content.KeyAssembler"}.AssignBool(false)
}
func (_SnapshotBranch_Content__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Content.KeyAssembler"}.AssignInt(0)
}
func (_SnapshotBranch_Content__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Content.KeyAssembler"}.AssignFloat(0)
}
func (ka *_SnapshotBranch_Content__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "target":
		if ka.s&fieldBit__SnapshotBranch_Content_Target != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__SnapshotBranch_Content_Target}
		}
		ka.s += fieldBit__SnapshotBranch_Content_Target
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	default:
		return ipld.ErrInvalidKey{TypeName: "ipldswh.SnapshotBranch_Content", Key: &_String{k}}
	}
}
func (_SnapshotBranch_Content__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Content.KeyAssembler"}.AssignBytes(nil)
}
func (_SnapshotBranch_Content__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Content.KeyAssembler"}.AssignLink(nil)
}
func (ka *_SnapshotBranch_Content__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_SnapshotBranch_Content__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (SnapshotBranch_Content) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n SnapshotBranch_Content) Representation() ipld.Node {
	return (*_SnapshotBranch_Content__Repr)(n)
}

type _SnapshotBranch_Content__Repr _SnapshotBranch_Content

var (
	fieldName__SnapshotBranch_Content_Target_serial = _String{"target"}
)
var _ ipld.Node = &_SnapshotBranch_Content__Repr{}

func (_SnapshotBranch_Content__Repr) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n *_SnapshotBranch_Content__Repr) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "target":
		return n.target.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n *_SnapshotBranch_Content__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_SnapshotBranch_Content__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Content.Repr"}.LookupByIndex(0)
}
func (n _SnapshotBranch_Content__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_SnapshotBranch_Content__Repr) MapIterator() ipld.MapIterator {
	return &_SnapshotBranch_Content__ReprMapItr{n, 0}
}

type _SnapshotBranch_Content__ReprMapItr struct {
	n   *_SnapshotBranch_Content__Repr
	idx int
}

func (itr *_SnapshotBranch_Content__ReprMapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 1 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__SnapshotBranch_Content_Target_serial
		v = itr.n.target.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_SnapshotBranch_Content__ReprMapItr) Done() bool {
	return itr.idx >= 1
}
func (_SnapshotBranch_Content__Repr) ListIterator() ipld.ListIterator {
	return nil
}
func (rn *_SnapshotBranch_Content__Repr) Length() int64 {
	l := 1
	return int64(l)
}
func (_SnapshotBranch_Content__Repr) IsAbsent() bool {
	return false
}
func (_SnapshotBranch_Content__Repr) IsNull() bool {
	return false
}
func (_SnapshotBranch_Content__Repr) AsBool() (bool, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Content.Repr"}.AsBool()
}
func (_SnapshotBranch_Content__Repr) AsInt() (int64, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Content.Repr"}.AsInt()
}
func (_SnapshotBranch_Content__Repr) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Content.Repr"}.AsFloat()
}
func (_SnapshotBranch_Content__Repr) AsString() (string, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Content.Repr"}.AsString()
}
func (_SnapshotBranch_Content__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Content.Repr"}.AsBytes()
}
func (_SnapshotBranch_Content__Repr) AsLink() (ipld.Link, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Content.Repr"}.AsLink()
}
func (_SnapshotBranch_Content__Repr) Prototype() ipld.NodePrototype {
	return _SnapshotBranch_Content__ReprPrototype{}
}

type _SnapshotBranch_Content__ReprPrototype struct{}

func (_SnapshotBranch_Content__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _SnapshotBranch_Content__ReprBuilder
	nb.Reset()
	return &nb
}

type _SnapshotBranch_Content__ReprBuilder struct {
	_SnapshotBranch_Content__ReprAssembler
}

func (nb *_SnapshotBranch_Content__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_SnapshotBranch_Content__ReprBuilder) Reset() {
	var w _SnapshotBranch_Content
	var m schema.Maybe
	*nb = _SnapshotBranch_Content__ReprBuilder{_SnapshotBranch_Content__ReprAssembler{w: &w, m: &m}}
}

type _SnapshotBranch_Content__ReprAssembler struct {
	w     *_SnapshotBranch_Content
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm        schema.Maybe
	ca_target _Link__ReprAssembler
}

func (na *_SnapshotBranch_Content__ReprAssembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_target.reset()
}
func (na *_SnapshotBranch_Content__ReprAssembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_SnapshotBranch_Content{}
	}
	return na, nil
}
func (_SnapshotBranch_Content__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Content.Repr"}.BeginList(0)
}
func (na *_SnapshotBranch_Content__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Content.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_SnapshotBranch_Content__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Content.Repr"}.AssignBool(false)
}
func (_SnapshotBranch_Content__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Content.Repr"}.AssignInt(0)
}
func (_SnapshotBranch_Content__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Content.Repr"}.AssignFloat(0)
}
func (_SnapshotBranch_Content__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Content.Repr"}.AssignString("")
}
func (_SnapshotBranch_Content__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Content.Repr"}.AssignBytes(nil)
}
func (_SnapshotBranch_Content__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Content.Repr"}.AssignLink(nil)
}
func (na *_SnapshotBranch_Content__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_SnapshotBranch_Content); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "ipldswh.SnapshotBranch_Content.Repr", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_SnapshotBranch_Content__ReprAssembler) Prototype() ipld.NodePrototype {
	return _SnapshotBranch_Content__ReprPrototype{}
}
func (ma *_SnapshotBranch_Content__ReprAssembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_SnapshotBranch_Content__ReprAssembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "target":
		if ma.s&fieldBit__SnapshotBranch_Content_Target != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__SnapshotBranch_Content_Target_serial}
		}
		ma.s += fieldBit__SnapshotBranch_Content_Target
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_target.w = &ma.w.target
		ma.ca_target.m = &ma.cm
		return &ma.ca_target, nil
	default:
	}
	return nil, ipld.ErrInvalidKey{TypeName: "ipldswh.SnapshotBranch_Content.Repr", Key: &_String{k}}
}
func (ma *_SnapshotBranch_Content__ReprAssembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_SnapshotBranch_Content__ReprKeyAssembler)(ma)
}
func (ma *_SnapshotBranch_Content__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_target.w = &ma.w.target
		ma.ca_target.m = &ma.cm
		return &ma.ca_target
	default:
		panic("unreachable")
	}
}
func (ma *_SnapshotBranch_Content__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__SnapshotBranch_Content_sufficient != fieldBits__SnapshotBranch_Content_sufficient {
		err := ipld.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__SnapshotBranch_Content_Target == 0 {
			err.Missing = append(err.Missing, "target")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_SnapshotBranch_Content__ReprAssembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_SnapshotBranch_Content__ReprAssembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler repr valueprototype")
}

type _SnapshotBranch_Content__ReprKeyAssembler _SnapshotBranch_Content__ReprAssembler

func (_SnapshotBranch_Content__ReprKeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Content.Repr.KeyAssembler"}.BeginMap(0)
}
func (_SnapshotBranch_Content__ReprKeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Content.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_SnapshotBranch_Content__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Content.Repr.KeyAssembler"}.AssignNull()
}
func (_SnapshotBranch_Content__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Content.Repr.KeyAssembler"}.AssignBool(false)
}
func (_SnapshotBranch_Content__ReprKeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Content.Repr.KeyAssembler"}.AssignInt(0)
}
func (_SnapshotBranch_Content__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Content.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_SnapshotBranch_Content__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "target":
		if ka.s&fieldBit__SnapshotBranch_Content_Target != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__SnapshotBranch_Content_Target_serial}
		}
		ka.s += fieldBit__SnapshotBranch_Content_Target
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	}
	return ipld.ErrInvalidKey{TypeName: "ipldswh.SnapshotBranch_Content.Repr", Key: &_String{k}}
}
func (_SnapshotBranch_Content__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Content.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_SnapshotBranch_Content__ReprKeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Content.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_SnapshotBranch_Content__ReprKeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_SnapshotBranch_Content__ReprKeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}

func (n _SnapshotBranch_Directory) FieldTarget() Link {
	return &n.target
}

type _SnapshotBranch_Directory__Maybe struct {
	m schema.Maybe
	v SnapshotBranch_Directory
}
type MaybeSnapshotBranch_Directory = *_SnapshotBranch_Directory__Maybe

func (m MaybeSnapshotBranch_Directory) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeSnapshotBranch_Directory) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeSnapshotBranch_Directory) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeSnapshotBranch_Directory) AsNode() ipld.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return ipld.Absent
	case schema.Maybe_Null:
		return ipld.Null
	case schema.Maybe_Value:
		return m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeSnapshotBranch_Directory) Must() SnapshotBranch_Directory {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}

var (
	fieldName__SnapshotBranch_Directory_Target = _String{"target"}
)
var _ ipld.Node = (SnapshotBranch_Directory)(&_SnapshotBranch_Directory{})
var _ schema.TypedNode = (SnapshotBranch_Directory)(&_SnapshotBranch_Directory{})

func (SnapshotBranch_Directory) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n SnapshotBranch_Directory) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "target":
		return &n.target, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n SnapshotBranch_Directory) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (SnapshotBranch_Directory) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Directory"}.LookupByIndex(0)
}
func (n SnapshotBranch_Directory) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n SnapshotBranch_Directory) MapIterator() ipld.MapIterator {
	return &_SnapshotBranch_Directory__MapItr{n, 0}
}

type _SnapshotBranch_Directory__MapItr struct {
	n   SnapshotBranch_Directory
	idx int
}

func (itr *_SnapshotBranch_Directory__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 1 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__SnapshotBranch_Directory_Target
		v = &itr.n.target
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_SnapshotBranch_Directory__MapItr) Done() bool {
	return itr.idx >= 1
}

func (SnapshotBranch_Directory) ListIterator() ipld.ListIterator {
	return nil
}
func (SnapshotBranch_Directory) Length() int64 {
	return 1
}
func (SnapshotBranch_Directory) IsAbsent() bool {
	return false
}
func (SnapshotBranch_Directory) IsNull() bool {
	return false
}
func (SnapshotBranch_Directory) AsBool() (bool, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Directory"}.AsBool()
}
func (SnapshotBranch_Directory) AsInt() (int64, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Directory"}.AsInt()
}
func (SnapshotBranch_Directory) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Directory"}.AsFloat()
}
func (SnapshotBranch_Directory) AsString() (string, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Directory"}.AsString()
}
func (SnapshotBranch_Directory) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Directory"}.AsBytes()
}
func (SnapshotBranch_Directory) AsLink() (ipld.Link, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Directory"}.AsLink()
}
func (SnapshotBranch_Directory) Prototype() ipld.NodePrototype {
	return _SnapshotBranch_Directory__Prototype{}
}

type _SnapshotBranch_Directory__Prototype struct{}

func (_SnapshotBranch_Directory__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _SnapshotBranch_Directory__Builder
	nb.Reset()
	return &nb
}

type _SnapshotBranch_Directory__Builder struct {
	_SnapshotBranch_Directory__Assembler
}

func (nb *_SnapshotBranch_Directory__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_SnapshotBranch_Directory__Builder) Reset() {
	var w _SnapshotBranch_Directory
	var m schema.Maybe
	*nb = _SnapshotBranch_Directory__Builder{_SnapshotBranch_Directory__Assembler{w: &w, m: &m}}
}

type _SnapshotBranch_Directory__Assembler struct {
	w     *_SnapshotBranch_Directory
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm        schema.Maybe
	ca_target _Link__Assembler
}

func (na *_SnapshotBranch_Directory__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_target.reset()
}

var (
	fieldBit__SnapshotBranch_Directory_Target      = 1 << 0
	fieldBits__SnapshotBranch_Directory_sufficient = 0 + 1<<0
)

func (na *_SnapshotBranch_Directory__Assembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_SnapshotBranch_Directory{}
	}
	return na, nil
}
func (_SnapshotBranch_Directory__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Directory"}.BeginList(0)
}
func (na *_SnapshotBranch_Directory__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Directory"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_SnapshotBranch_Directory__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Directory"}.AssignBool(false)
}
func (_SnapshotBranch_Directory__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Directory"}.AssignInt(0)
}
func (_SnapshotBranch_Directory__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Directory"}.AssignFloat(0)
}
func (_SnapshotBranch_Directory__Assembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Directory"}.AssignString("")
}
func (_SnapshotBranch_Directory__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Directory"}.AssignBytes(nil)
}
func (_SnapshotBranch_Directory__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Directory"}.AssignLink(nil)
}
func (na *_SnapshotBranch_Directory__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_SnapshotBranch_Directory); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "ipldswh.SnapshotBranch_Directory", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_SnapshotBranch_Directory__Assembler) Prototype() ipld.NodePrototype {
	return _SnapshotBranch_Directory__Prototype{}
}
func (ma *_SnapshotBranch_Directory__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_target.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_SnapshotBranch_Directory__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "target":
		if ma.s&fieldBit__SnapshotBranch_Directory_Target != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__SnapshotBranch_Directory_Target}
		}
		ma.s += fieldBit__SnapshotBranch_Directory_Target
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_target.w = &ma.w.target
		ma.ca_target.m = &ma.cm
		return &ma.ca_target, nil
	}
	return nil, ipld.ErrInvalidKey{TypeName: "ipldswh.SnapshotBranch_Directory", Key: &_String{k}}
}
func (ma *_SnapshotBranch_Directory__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_SnapshotBranch_Directory__KeyAssembler)(ma)
}
func (ma *_SnapshotBranch_Directory__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_target.w = &ma.w.target
		ma.ca_target.m = &ma.cm
		return &ma.ca_target
	default:
		panic("unreachable")
	}
}
func (ma *_SnapshotBranch_Directory__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__SnapshotBranch_Directory_sufficient != fieldBits__SnapshotBranch_Directory_sufficient {
		err := ipld.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__SnapshotBranch_Directory_Target == 0 {
			err.Missing = append(err.Missing, "target")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_SnapshotBranch_Directory__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_SnapshotBranch_Directory__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}

type _SnapshotBranch_Directory__KeyAssembler _SnapshotBranch_Directory__Assembler

func (_SnapshotBranch_Directory__KeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Directory.KeyAssembler"}.BeginMap(0)
}
func (_SnapshotBranch_Directory__KeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Directory.KeyAssembler"}.BeginList(0)
}
func (na *_SnapshotBranch_Directory__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Directory.KeyAssembler"}.AssignNull()
}
func (_SnapshotBranch_Directory__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Directory.KeyAssembler"}.AssignBool(false)
}
func (_SnapshotBranch_Directory__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Directory.KeyAssembler"}.AssignInt(0)
}
func (_SnapshotBranch_Directory__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Directory.KeyAssembler"}.AssignFloat(0)
}
func (ka *_SnapshotBranch_Directory__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "target":
		if ka.s&fieldBit__SnapshotBranch_Directory_Target != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__SnapshotBranch_Directory_Target}
		}
		ka.s += fieldBit__SnapshotBranch_Directory_Target
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	default:
		return ipld.ErrInvalidKey{TypeName: "ipldswh.SnapshotBranch_Directory", Key: &_String{k}}
	}
}
func (_SnapshotBranch_Directory__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Directory.KeyAssembler"}.AssignBytes(nil)
}
func (_SnapshotBranch_Directory__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Directory.KeyAssembler"}.AssignLink(nil)
}
func (ka *_SnapshotBranch_Directory__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_SnapshotBranch_Directory__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (SnapshotBranch_Directory) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n SnapshotBranch_Directory) Representation() ipld.Node {
	return (*_SnapshotBranch_Directory__Repr)(n)
}

type _SnapshotBranch_Directory__Repr _SnapshotBranch_Directory

var (
	fieldName__SnapshotBranch_Directory_Target_serial = _String{"target"}
)
var _ ipld.Node = &_SnapshotBranch_Directory__Repr{}

func (_SnapshotBranch_Directory__Repr) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n *_SnapshotBranch_Directory__Repr) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "target":
		return n.target.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n *_SnapshotBranch_Directory__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_SnapshotBranch_Directory__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Directory.Repr"}.LookupByIndex(0)
}
func (n _SnapshotBranch_Directory__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_SnapshotBranch_Directory__Repr) MapIterator() ipld.MapIterator {
	return &_SnapshotBranch_Directory__ReprMapItr{n, 0}
}

type _SnapshotBranch_Directory__ReprMapItr struct {
	n   *_SnapshotBranch_Directory__Repr
	idx int
}

func (itr *_SnapshotBranch_Directory__ReprMapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 1 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__SnapshotBranch_Directory_Target_serial
		v = itr.n.target.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_SnapshotBranch_Directory__ReprMapItr) Done() bool {
	return itr.idx >= 1
}
func (_SnapshotBranch_Directory__Repr) ListIterator() ipld.ListIterator {
	return nil
}
func (rn *_SnapshotBranch_Directory__Repr) Length() int64 {
	l := 1
	return int64(l)
}
func (_SnapshotBranch_Directory__Repr) IsAbsent() bool {
	return false
}
func (_SnapshotBranch_Directory__Repr) IsNull() bool {
	return false
}
func (_SnapshotBranch_Directory__Repr) AsBool() (bool, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Directory.Repr"}.AsBool()
}
func (_SnapshotBranch_Directory__Repr) AsInt() (int64, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Directory.Repr"}.AsInt()
}
func (_SnapshotBranch_Directory__Repr) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Directory.Repr"}.AsFloat()
}
func (_SnapshotBranch_Directory__Repr) AsString() (string, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Directory.Repr"}.AsString()
}
func (_SnapshotBranch_Directory__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Directory.Repr"}.AsBytes()
}
func (_SnapshotBranch_Directory__Repr) AsLink() (ipld.Link, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Directory.Repr"}.AsLink()
}
func (_SnapshotBranch_Directory__Repr) Prototype() ipld.NodePrototype {
	return _SnapshotBranch_Directory__ReprPrototype{}
}

type _SnapshotBranch_Directory__ReprPrototype struct{}

func (_SnapshotBranch_Directory__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _SnapshotBranch_Directory__ReprBuilder
	nb.Reset()
	return &nb
}

type _SnapshotBranch_Directory__ReprBuilder struct {
	_SnapshotBranch_Directory__ReprAssembler
}

func (nb *_SnapshotBranch_Directory__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_SnapshotBranch_Directory__ReprBuilder) Reset() {
	var w _SnapshotBranch_Directory
	var m schema.Maybe
	*nb = _SnapshotBranch_Directory__ReprBuilder{_SnapshotBranch_Directory__ReprAssembler{w: &w, m: &m}}
}

type _SnapshotBranch_Directory__ReprAssembler struct {
	w     *_SnapshotBranch_Directory
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm        schema.Maybe
	ca_target _Link__ReprAssembler
}

func (na *_SnapshotBranch_Directory__ReprAssembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_target.reset()
}
func (na *_SnapshotBranch_Directory__ReprAssembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_SnapshotBranch_Directory{}
	}
	return na, nil
}
func (_SnapshotBranch_Directory__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Directory.Repr"}.BeginList(0)
}
func (na *_SnapshotBranch_Directory__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Directory.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_SnapshotBranch_Directory__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Directory.Repr"}.AssignBool(false)
}
func (_SnapshotBranch_Directory__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Directory.Repr"}.AssignInt(0)
}
func (_SnapshotBranch_Directory__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Directory.Repr"}.AssignFloat(0)
}
func (_SnapshotBranch_Directory__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Directory.Repr"}.AssignString("")
}
func (_SnapshotBranch_Directory__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Directory.Repr"}.AssignBytes(nil)
}
func (_SnapshotBranch_Directory__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Directory.Repr"}.AssignLink(nil)
}
func (na *_SnapshotBranch_Directory__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_SnapshotBranch_Directory); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "ipldswh.SnapshotBranch_Directory.Repr", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_SnapshotBranch_Directory__ReprAssembler) Prototype() ipld.NodePrototype {
	return _SnapshotBranch_Directory__ReprPrototype{}
}
func (ma *_SnapshotBranch_Directory__ReprAssembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_SnapshotBranch_Directory__ReprAssembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "target":
		if ma.s&fieldBit__SnapshotBranch_Directory_Target != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__SnapshotBranch_Directory_Target_serial}
		}
		ma.s += fieldBit__SnapshotBranch_Directory_Target
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_target.w = &ma.w.target
		ma.ca_target.m = &ma.cm
		return &ma.ca_target, nil
	default:
	}
	return nil, ipld.ErrInvalidKey{TypeName: "ipldswh.SnapshotBranch_Directory.Repr", Key: &_String{k}}
}
func (ma *_SnapshotBranch_Directory__ReprAssembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_SnapshotBranch_Directory__ReprKeyAssembler)(ma)
}
func (ma *_SnapshotBranch_Directory__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_target.w = &ma.w.target
		ma.ca_target.m = &ma.cm
		return &ma.ca_target
	default:
		panic("unreachable")
	}
}
func (ma *_SnapshotBranch_Directory__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__SnapshotBranch_Directory_sufficient != fieldBits__SnapshotBranch_Directory_sufficient {
		err := ipld.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__SnapshotBranch_Directory_Target == 0 {
			err.Missing = append(err.Missing, "target")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_SnapshotBranch_Directory__ReprAssembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_SnapshotBranch_Directory__ReprAssembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler repr valueprototype")
}

type _SnapshotBranch_Directory__ReprKeyAssembler _SnapshotBranch_Directory__ReprAssembler

func (_SnapshotBranch_Directory__ReprKeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Directory.Repr.KeyAssembler"}.BeginMap(0)
}
func (_SnapshotBranch_Directory__ReprKeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Directory.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_SnapshotBranch_Directory__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Directory.Repr.KeyAssembler"}.AssignNull()
}
func (_SnapshotBranch_Directory__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Directory.Repr.KeyAssembler"}.AssignBool(false)
}
func (_SnapshotBranch_Directory__ReprKeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Directory.Repr.KeyAssembler"}.AssignInt(0)
}
func (_SnapshotBranch_Directory__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Directory.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_SnapshotBranch_Directory__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "target":
		if ka.s&fieldBit__SnapshotBranch_Directory_Target != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__SnapshotBranch_Directory_Target_serial}
		}
		ka.s += fieldBit__SnapshotBranch_Directory_Target
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	}
	return ipld.ErrInvalidKey{TypeName: "ipldswh.SnapshotBranch_Directory.Repr", Key: &_String{k}}
}
func (_SnapshotBranch_Directory__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Directory.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_SnapshotBranch_Directory__ReprKeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Directory.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_SnapshotBranch_Directory__ReprKeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_SnapshotBranch_Directory__ReprKeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}

func (n _SnapshotBranch_Release) FieldTarget() Link {
	return &n.target
}

type _SnapshotBranch_Release__Maybe struct {
	m schema.Maybe
	v SnapshotBranch_Release
}
type MaybeSnapshotBranch_Release = *_SnapshotBranch_Release__Maybe

func (m MaybeSnapshotBranch_Release) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeSnapshotBranch_Release) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeSnapshotBranch_Release) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeSnapshotBranch_Release) AsNode() ipld.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return ipld.Absent
	case schema.Maybe_Null:
		return ipld.Null
	case schema.Maybe_Value:
		return m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeSnapshotBranch_Release) Must() SnapshotBranch_Release {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}

var (
	fieldName__SnapshotBranch_Release_Target = _String{"target"}
)
var _ ipld.Node = (SnapshotBranch_Release)(&_SnapshotBranch_Release{})
var _ schema.TypedNode = (SnapshotBranch_Release)(&_SnapshotBranch_Release{})

func (SnapshotBranch_Release) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n SnapshotBranch_Release) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "target":
		return &n.target, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n SnapshotBranch_Release) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (SnapshotBranch_Release) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Release"}.LookupByIndex(0)
}
func (n SnapshotBranch_Release) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n SnapshotBranch_Release) MapIterator() ipld.MapIterator {
	return &_SnapshotBranch_Release__MapItr{n, 0}
}

type _SnapshotBranch_Release__MapItr struct {
	n   SnapshotBranch_Release
	idx int
}

func (itr *_SnapshotBranch_Release__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 1 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__SnapshotBranch_Release_Target
		v = &itr.n.target
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_SnapshotBranch_Release__MapItr) Done() bool {
	return itr.idx >= 1
}

func (SnapshotBranch_Release) ListIterator() ipld.ListIterator {
	return nil
}
func (SnapshotBranch_Release) Length() int64 {
	return 1
}
func (SnapshotBranch_Release) IsAbsent() bool {
	return false
}
func (SnapshotBranch_Release) IsNull() bool {
	return false
}
func (SnapshotBranch_Release) AsBool() (bool, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Release"}.AsBool()
}
func (SnapshotBranch_Release) AsInt() (int64, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Release"}.AsInt()
}
func (SnapshotBranch_Release) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Release"}.AsFloat()
}
func (SnapshotBranch_Release) AsString() (string, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Release"}.AsString()
}
func (SnapshotBranch_Release) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Release"}.AsBytes()
}
func (SnapshotBranch_Release) AsLink() (ipld.Link, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Release"}.AsLink()
}
func (SnapshotBranch_Release) Prototype() ipld.NodePrototype {
	return _SnapshotBranch_Release__Prototype{}
}

type _SnapshotBranch_Release__Prototype struct{}

func (_SnapshotBranch_Release__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _SnapshotBranch_Release__Builder
	nb.Reset()
	return &nb
}

type _SnapshotBranch_Release__Builder struct {
	_SnapshotBranch_Release__Assembler
}

func (nb *_SnapshotBranch_Release__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_SnapshotBranch_Release__Builder) Reset() {
	var w _SnapshotBranch_Release
	var m schema.Maybe
	*nb = _SnapshotBranch_Release__Builder{_SnapshotBranch_Release__Assembler{w: &w, m: &m}}
}

type _SnapshotBranch_Release__Assembler struct {
	w     *_SnapshotBranch_Release
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm        schema.Maybe
	ca_target _Link__Assembler
}

func (na *_SnapshotBranch_Release__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_target.reset()
}

var (
	fieldBit__SnapshotBranch_Release_Target      = 1 << 0
	fieldBits__SnapshotBranch_Release_sufficient = 0 + 1<<0
)

func (na *_SnapshotBranch_Release__Assembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_SnapshotBranch_Release{}
	}
	return na, nil
}
func (_SnapshotBranch_Release__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Release"}.BeginList(0)
}
func (na *_SnapshotBranch_Release__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Release"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_SnapshotBranch_Release__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Release"}.AssignBool(false)
}
func (_SnapshotBranch_Release__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Release"}.AssignInt(0)
}
func (_SnapshotBranch_Release__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Release"}.AssignFloat(0)
}
func (_SnapshotBranch_Release__Assembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Release"}.AssignString("")
}
func (_SnapshotBranch_Release__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Release"}.AssignBytes(nil)
}
func (_SnapshotBranch_Release__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Release"}.AssignLink(nil)
}
func (na *_SnapshotBranch_Release__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_SnapshotBranch_Release); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "ipldswh.SnapshotBranch_Release", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_SnapshotBranch_Release__Assembler) Prototype() ipld.NodePrototype {
	return _SnapshotBranch_Release__Prototype{}
}
func (ma *_SnapshotBranch_Release__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_target.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_SnapshotBranch_Release__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "target":
		if ma.s&fieldBit__SnapshotBranch_Release_Target != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__SnapshotBranch_Release_Target}
		}
		ma.s += fieldBit__SnapshotBranch_Release_Target
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_target.w = &ma.w.target
		ma.ca_target.m = &ma.cm
		return &ma.ca_target, nil
	}
	return nil, ipld.ErrInvalidKey{TypeName: "ipldswh.SnapshotBranch_Release", Key: &_String{k}}
}
func (ma *_SnapshotBranch_Release__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_SnapshotBranch_Release__KeyAssembler)(ma)
}
func (ma *_SnapshotBranch_Release__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_target.w = &ma.w.target
		ma.ca_target.m = &ma.cm
		return &ma.ca_target
	default:
		panic("unreachable")
	}
}
func (ma *_SnapshotBranch_Release__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__SnapshotBranch_Release_sufficient != fieldBits__SnapshotBranch_Release_sufficient {
		err := ipld.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__SnapshotBranch_Release_Target == 0 {
			err.Missing = append(err.Missing, "target")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_SnapshotBranch_Release__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_SnapshotBranch_Release__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}

type _SnapshotBranch_Release__KeyAssembler _SnapshotBranch_Release__Assembler

func (_SnapshotBranch_Release__KeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Release.KeyAssembler"}.BeginMap(0)
}
func (_SnapshotBranch_Release__KeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Release.KeyAssembler"}.BeginList(0)
}
func (na *_SnapshotBranch_Release__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Release.KeyAssembler"}.AssignNull()
}
func (_SnapshotBranch_Release__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Release.KeyAssembler"}.AssignBool(false)
}
func (_SnapshotBranch_Release__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Release.KeyAssembler"}.AssignInt(0)
}
func (_SnapshotBranch_Release__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Release.KeyAssembler"}.AssignFloat(0)
}
func (ka *_SnapshotBranch_Release__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "target":
		if ka.s&fieldBit__SnapshotBranch_Release_Target != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__SnapshotBranch_Release_Target}
		}
		ka.s += fieldBit__SnapshotBranch_Release_Target
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	default:
		return ipld.ErrInvalidKey{TypeName: "ipldswh.SnapshotBranch_Release", Key: &_String{k}}
	}
}
func (_SnapshotBranch_Release__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Release.KeyAssembler"}.AssignBytes(nil)
}
func (_SnapshotBranch_Release__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Release.KeyAssembler"}.AssignLink(nil)
}
func (ka *_SnapshotBranch_Release__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_SnapshotBranch_Release__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (SnapshotBranch_Release) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n SnapshotBranch_Release) Representation() ipld.Node {
	return (*_SnapshotBranch_Release__Repr)(n)
}

type _SnapshotBranch_Release__Repr _SnapshotBranch_Release

var (
	fieldName__SnapshotBranch_Release_Target_serial = _String{"target"}
)
var _ ipld.Node = &_SnapshotBranch_Release__Repr{}

func (_SnapshotBranch_Release__Repr) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n *_SnapshotBranch_Release__Repr) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "target":
		return n.target.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n *_SnapshotBranch_Release__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_SnapshotBranch_Release__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Release.Repr"}.LookupByIndex(0)
}
func (n _SnapshotBranch_Release__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_SnapshotBranch_Release__Repr) MapIterator() ipld.MapIterator {
	return &_SnapshotBranch_Release__ReprMapItr{n, 0}
}

type _SnapshotBranch_Release__ReprMapItr struct {
	n   *_SnapshotBranch_Release__Repr
	idx int
}

func (itr *_SnapshotBranch_Release__ReprMapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 1 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__SnapshotBranch_Release_Target_serial
		v = itr.n.target.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_SnapshotBranch_Release__ReprMapItr) Done() bool {
	return itr.idx >= 1
}
func (_SnapshotBranch_Release__Repr) ListIterator() ipld.ListIterator {
	return nil
}
func (rn *_SnapshotBranch_Release__Repr) Length() int64 {
	l := 1
	return int64(l)
}
func (_SnapshotBranch_Release__Repr) IsAbsent() bool {
	return false
}
func (_SnapshotBranch_Release__Repr) IsNull() bool {
	return false
}
func (_SnapshotBranch_Release__Repr) AsBool() (bool, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Release.Repr"}.AsBool()
}
func (_SnapshotBranch_Release__Repr) AsInt() (int64, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Release.Repr"}.AsInt()
}
func (_SnapshotBranch_Release__Repr) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Release.Repr"}.AsFloat()
}
func (_SnapshotBranch_Release__Repr) AsString() (string, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Release.Repr"}.AsString()
}
func (_SnapshotBranch_Release__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Release.Repr"}.AsBytes()
}
func (_SnapshotBranch_Release__Repr) AsLink() (ipld.Link, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Release.Repr"}.AsLink()
}
func (_SnapshotBranch_Release__Repr) Prototype() ipld.NodePrototype {
	return _SnapshotBranch_Release__ReprPrototype{}
}

type _SnapshotBranch_Release__ReprPrototype struct{}

func (_SnapshotBranch_Release__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _SnapshotBranch_Release__ReprBuilder
	nb.Reset()
	return &nb
}

type _SnapshotBranch_Release__ReprBuilder struct {
	_SnapshotBranch_Release__ReprAssembler
}

func (nb *_SnapshotBranch_Release__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_SnapshotBranch_Release__ReprBuilder) Reset() {
	var w _SnapshotBranch_Release
	var m schema.Maybe
	*nb = _SnapshotBranch_Release__ReprBuilder{_SnapshotBranch_Release__ReprAssembler{w: &w, m: &m}}
}

type _SnapshotBranch_Release__ReprAssembler struct {
	w     *_SnapshotBranch_Release
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm        schema.Maybe
	ca_target _Link__ReprAssembler
}

func (na *_SnapshotBranch_Release__ReprAssembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_target.reset()
}
func (na *_SnapshotBranch_Release__ReprAssembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_SnapshotBranch_Release{}
	}
	return na, nil
}
func (_SnapshotBranch_Release__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Release.Repr"}.BeginList(0)
}
func (na *_SnapshotBranch_Release__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Release.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_SnapshotBranch_Release__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Release.Repr"}.AssignBool(false)
}
func (_SnapshotBranch_Release__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Release.Repr"}.AssignInt(0)
}
func (_SnapshotBranch_Release__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Release.Repr"}.AssignFloat(0)
}
func (_SnapshotBranch_Release__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Release.Repr"}.AssignString("")
}
func (_SnapshotBranch_Release__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Release.Repr"}.AssignBytes(nil)
}
func (_SnapshotBranch_Release__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Release.Repr"}.AssignLink(nil)
}
func (na *_SnapshotBranch_Release__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_SnapshotBranch_Release); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "ipldswh.SnapshotBranch_Release.Repr", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_SnapshotBranch_Release__ReprAssembler) Prototype() ipld.NodePrototype {
	return _SnapshotBranch_Release__ReprPrototype{}
}
func (ma *_SnapshotBranch_Release__ReprAssembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_SnapshotBranch_Release__ReprAssembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "target":
		if ma.s&fieldBit__SnapshotBranch_Release_Target != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__SnapshotBranch_Release_Target_serial}
		}
		ma.s += fieldBit__SnapshotBranch_Release_Target
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_target.w = &ma.w.target
		ma.ca_target.m = &ma.cm
		return &ma.ca_target, nil
	default:
	}
	return nil, ipld.ErrInvalidKey{TypeName: "ipldswh.SnapshotBranch_Release.Repr", Key: &_String{k}}
}
func (ma *_SnapshotBranch_Release__ReprAssembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_SnapshotBranch_Release__ReprKeyAssembler)(ma)
}
func (ma *_SnapshotBranch_Release__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_target.w = &ma.w.target
		ma.ca_target.m = &ma.cm
		return &ma.ca_target
	default:
		panic("unreachable")
	}
}
func (ma *_SnapshotBranch_Release__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__SnapshotBranch_Release_sufficient != fieldBits__SnapshotBranch_Release_sufficient {
		err := ipld.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__SnapshotBranch_Release_Target == 0 {
			err.Missing = append(err.Missing, "target")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_SnapshotBranch_Release__ReprAssembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_SnapshotBranch_Release__ReprAssembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler repr valueprototype")
}

type _SnapshotBranch_Release__ReprKeyAssembler _SnapshotBranch_Release__ReprAssembler

func (_SnapshotBranch_Release__ReprKeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Release.Repr.KeyAssembler"}.BeginMap(0)
}
func (_SnapshotBranch_Release__ReprKeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Release.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_SnapshotBranch_Release__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Release.Repr.KeyAssembler"}.AssignNull()
}
func (_SnapshotBranch_Release__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Release.Repr.KeyAssembler"}.AssignBool(false)
}
func (_SnapshotBranch_Release__ReprKeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Release.Repr.KeyAssembler"}.AssignInt(0)
}
func (_SnapshotBranch_Release__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Release.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_SnapshotBranch_Release__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "target":
		if ka.s&fieldBit__SnapshotBranch_Release_Target != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__SnapshotBranch_Release_Target_serial}
		}
		ka.s += fieldBit__SnapshotBranch_Release_Target
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	}
	return ipld.ErrInvalidKey{TypeName: "ipldswh.SnapshotBranch_Release.Repr", Key: &_String{k}}
}
func (_SnapshotBranch_Release__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Release.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_SnapshotBranch_Release__ReprKeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Release.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_SnapshotBranch_Release__ReprKeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_SnapshotBranch_Release__ReprKeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}

func (n _SnapshotBranch_Revision) FieldTarget() Link {
	return &n.target
}

type _SnapshotBranch_Revision__Maybe struct {
	m schema.Maybe
	v SnapshotBranch_Revision
}
type MaybeSnapshotBranch_Revision = *_SnapshotBranch_Revision__Maybe

func (m MaybeSnapshotBranch_Revision) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeSnapshotBranch_Revision) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeSnapshotBranch_Revision) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeSnapshotBranch_Revision) AsNode() ipld.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return ipld.Absent
	case schema.Maybe_Null:
		return ipld.Null
	case schema.Maybe_Value:
		return m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeSnapshotBranch_Revision) Must() SnapshotBranch_Revision {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}

var (
	fieldName__SnapshotBranch_Revision_Target = _String{"target"}
)
var _ ipld.Node = (SnapshotBranch_Revision)(&_SnapshotBranch_Revision{})
var _ schema.TypedNode = (SnapshotBranch_Revision)(&_SnapshotBranch_Revision{})

func (SnapshotBranch_Revision) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n SnapshotBranch_Revision) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "target":
		return &n.target, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n SnapshotBranch_Revision) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (SnapshotBranch_Revision) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Revision"}.LookupByIndex(0)
}
func (n SnapshotBranch_Revision) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n SnapshotBranch_Revision) MapIterator() ipld.MapIterator {
	return &_SnapshotBranch_Revision__MapItr{n, 0}
}

type _SnapshotBranch_Revision__MapItr struct {
	n   SnapshotBranch_Revision
	idx int
}

func (itr *_SnapshotBranch_Revision__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 1 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__SnapshotBranch_Revision_Target
		v = &itr.n.target
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_SnapshotBranch_Revision__MapItr) Done() bool {
	return itr.idx >= 1
}

func (SnapshotBranch_Revision) ListIterator() ipld.ListIterator {
	return nil
}
func (SnapshotBranch_Revision) Length() int64 {
	return 1
}
func (SnapshotBranch_Revision) IsAbsent() bool {
	return false
}
func (SnapshotBranch_Revision) IsNull() bool {
	return false
}
func (SnapshotBranch_Revision) AsBool() (bool, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Revision"}.AsBool()
}
func (SnapshotBranch_Revision) AsInt() (int64, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Revision"}.AsInt()
}
func (SnapshotBranch_Revision) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Revision"}.AsFloat()
}
func (SnapshotBranch_Revision) AsString() (string, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Revision"}.AsString()
}
func (SnapshotBranch_Revision) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Revision"}.AsBytes()
}
func (SnapshotBranch_Revision) AsLink() (ipld.Link, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Revision"}.AsLink()
}
func (SnapshotBranch_Revision) Prototype() ipld.NodePrototype {
	return _SnapshotBranch_Revision__Prototype{}
}

type _SnapshotBranch_Revision__Prototype struct{}

func (_SnapshotBranch_Revision__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _SnapshotBranch_Revision__Builder
	nb.Reset()
	return &nb
}

type _SnapshotBranch_Revision__Builder struct {
	_SnapshotBranch_Revision__Assembler
}

func (nb *_SnapshotBranch_Revision__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_SnapshotBranch_Revision__Builder) Reset() {
	var w _SnapshotBranch_Revision
	var m schema.Maybe
	*nb = _SnapshotBranch_Revision__Builder{_SnapshotBranch_Revision__Assembler{w: &w, m: &m}}
}

type _SnapshotBranch_Revision__Assembler struct {
	w     *_SnapshotBranch_Revision
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm        schema.Maybe
	ca_target _Link__Assembler
}

func (na *_SnapshotBranch_Revision__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_target.reset()
}

var (
	fieldBit__SnapshotBranch_Revision_Target      = 1 << 0
	fieldBits__SnapshotBranch_Revision_sufficient = 0 + 1<<0
)

func (na *_SnapshotBranch_Revision__Assembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_SnapshotBranch_Revision{}
	}
	return na, nil
}
func (_SnapshotBranch_Revision__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Revision"}.BeginList(0)
}
func (na *_SnapshotBranch_Revision__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Revision"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_SnapshotBranch_Revision__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Revision"}.AssignBool(false)
}
func (_SnapshotBranch_Revision__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Revision"}.AssignInt(0)
}
func (_SnapshotBranch_Revision__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Revision"}.AssignFloat(0)
}
func (_SnapshotBranch_Revision__Assembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Revision"}.AssignString("")
}
func (_SnapshotBranch_Revision__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Revision"}.AssignBytes(nil)
}
func (_SnapshotBranch_Revision__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Revision"}.AssignLink(nil)
}
func (na *_SnapshotBranch_Revision__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_SnapshotBranch_Revision); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "ipldswh.SnapshotBranch_Revision", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_SnapshotBranch_Revision__Assembler) Prototype() ipld.NodePrototype {
	return _SnapshotBranch_Revision__Prototype{}
}
func (ma *_SnapshotBranch_Revision__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_target.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_SnapshotBranch_Revision__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "target":
		if ma.s&fieldBit__SnapshotBranch_Revision_Target != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__SnapshotBranch_Revision_Target}
		}
		ma.s += fieldBit__SnapshotBranch_Revision_Target
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_target.w = &ma.w.target
		ma.ca_target.m = &ma.cm
		return &ma.ca_target, nil
	}
	return nil, ipld.ErrInvalidKey{TypeName: "ipldswh.SnapshotBranch_Revision", Key: &_String{k}}
}
func (ma *_SnapshotBranch_Revision__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_SnapshotBranch_Revision__KeyAssembler)(ma)
}
func (ma *_SnapshotBranch_Revision__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_target.w = &ma.w.target
		ma.ca_target.m = &ma.cm
		return &ma.ca_target
	default:
		panic("unreachable")
	}
}
func (ma *_SnapshotBranch_Revision__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__SnapshotBranch_Revision_sufficient != fieldBits__SnapshotBranch_Revision_sufficient {
		err := ipld.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__SnapshotBranch_Revision_Target == 0 {
			err.Missing = append(err.Missing, "target")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_SnapshotBranch_Revision__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_SnapshotBranch_Revision__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}

type _SnapshotBranch_Revision__KeyAssembler _SnapshotBranch_Revision__Assembler

func (_SnapshotBranch_Revision__KeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Revision.KeyAssembler"}.BeginMap(0)
}
func (_SnapshotBranch_Revision__KeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Revision.KeyAssembler"}.BeginList(0)
}
func (na *_SnapshotBranch_Revision__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Revision.KeyAssembler"}.AssignNull()
}
func (_SnapshotBranch_Revision__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Revision.KeyAssembler"}.AssignBool(false)
}
func (_SnapshotBranch_Revision__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Revision.KeyAssembler"}.AssignInt(0)
}
func (_SnapshotBranch_Revision__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Revision.KeyAssembler"}.AssignFloat(0)
}
func (ka *_SnapshotBranch_Revision__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "target":
		if ka.s&fieldBit__SnapshotBranch_Revision_Target != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__SnapshotBranch_Revision_Target}
		}
		ka.s += fieldBit__SnapshotBranch_Revision_Target
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	default:
		return ipld.ErrInvalidKey{TypeName: "ipldswh.SnapshotBranch_Revision", Key: &_String{k}}
	}
}
func (_SnapshotBranch_Revision__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Revision.KeyAssembler"}.AssignBytes(nil)
}
func (_SnapshotBranch_Revision__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Revision.KeyAssembler"}.AssignLink(nil)
}
func (ka *_SnapshotBranch_Revision__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_SnapshotBranch_Revision__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (SnapshotBranch_Revision) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n SnapshotBranch_Revision) Representation() ipld.Node {
	return (*_SnapshotBranch_Revision__Repr)(n)
}

type _SnapshotBranch_Revision__Repr _SnapshotBranch_Revision

var (
	fieldName__SnapshotBranch_Revision_Target_serial = _String{"target"}
)
var _ ipld.Node = &_SnapshotBranch_Revision__Repr{}

func (_SnapshotBranch_Revision__Repr) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n *_SnapshotBranch_Revision__Repr) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "target":
		return n.target.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n *_SnapshotBranch_Revision__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_SnapshotBranch_Revision__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Revision.Repr"}.LookupByIndex(0)
}
func (n _SnapshotBranch_Revision__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_SnapshotBranch_Revision__Repr) MapIterator() ipld.MapIterator {
	return &_SnapshotBranch_Revision__ReprMapItr{n, 0}
}

type _SnapshotBranch_Revision__ReprMapItr struct {
	n   *_SnapshotBranch_Revision__Repr
	idx int
}

func (itr *_SnapshotBranch_Revision__ReprMapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 1 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__SnapshotBranch_Revision_Target_serial
		v = itr.n.target.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_SnapshotBranch_Revision__ReprMapItr) Done() bool {
	return itr.idx >= 1
}
func (_SnapshotBranch_Revision__Repr) ListIterator() ipld.ListIterator {
	return nil
}
func (rn *_SnapshotBranch_Revision__Repr) Length() int64 {
	l := 1
	return int64(l)
}
func (_SnapshotBranch_Revision__Repr) IsAbsent() bool {
	return false
}
func (_SnapshotBranch_Revision__Repr) IsNull() bool {
	return false
}
func (_SnapshotBranch_Revision__Repr) AsBool() (bool, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Revision.Repr"}.AsBool()
}
func (_SnapshotBranch_Revision__Repr) AsInt() (int64, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Revision.Repr"}.AsInt()
}
func (_SnapshotBranch_Revision__Repr) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Revision.Repr"}.AsFloat()
}
func (_SnapshotBranch_Revision__Repr) AsString() (string, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Revision.Repr"}.AsString()
}
func (_SnapshotBranch_Revision__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Revision.Repr"}.AsBytes()
}
func (_SnapshotBranch_Revision__Repr) AsLink() (ipld.Link, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Revision.Repr"}.AsLink()
}
func (_SnapshotBranch_Revision__Repr) Prototype() ipld.NodePrototype {
	return _SnapshotBranch_Revision__ReprPrototype{}
}

type _SnapshotBranch_Revision__ReprPrototype struct{}

func (_SnapshotBranch_Revision__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _SnapshotBranch_Revision__ReprBuilder
	nb.Reset()
	return &nb
}

type _SnapshotBranch_Revision__ReprBuilder struct {
	_SnapshotBranch_Revision__ReprAssembler
}

func (nb *_SnapshotBranch_Revision__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_SnapshotBranch_Revision__ReprBuilder) Reset() {
	var w _SnapshotBranch_Revision
	var m schema.Maybe
	*nb = _SnapshotBranch_Revision__ReprBuilder{_SnapshotBranch_Revision__ReprAssembler{w: &w, m: &m}}
}

type _SnapshotBranch_Revision__ReprAssembler struct {
	w     *_SnapshotBranch_Revision
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm        schema.Maybe
	ca_target _Link__ReprAssembler
}

func (na *_SnapshotBranch_Revision__ReprAssembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_target.reset()
}
func (na *_SnapshotBranch_Revision__ReprAssembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_SnapshotBranch_Revision{}
	}
	return na, nil
}
func (_SnapshotBranch_Revision__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Revision.Repr"}.BeginList(0)
}
func (na *_SnapshotBranch_Revision__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Revision.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_SnapshotBranch_Revision__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Revision.Repr"}.AssignBool(false)
}
func (_SnapshotBranch_Revision__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Revision.Repr"}.AssignInt(0)
}
func (_SnapshotBranch_Revision__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Revision.Repr"}.AssignFloat(0)
}
func (_SnapshotBranch_Revision__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Revision.Repr"}.AssignString("")
}
func (_SnapshotBranch_Revision__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Revision.Repr"}.AssignBytes(nil)
}
func (_SnapshotBranch_Revision__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Revision.Repr"}.AssignLink(nil)
}
func (na *_SnapshotBranch_Revision__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_SnapshotBranch_Revision); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "ipldswh.SnapshotBranch_Revision.Repr", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_SnapshotBranch_Revision__ReprAssembler) Prototype() ipld.NodePrototype {
	return _SnapshotBranch_Revision__ReprPrototype{}
}
func (ma *_SnapshotBranch_Revision__ReprAssembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_SnapshotBranch_Revision__ReprAssembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "target":
		if ma.s&fieldBit__SnapshotBranch_Revision_Target != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__SnapshotBranch_Revision_Target_serial}
		}
		ma.s += fieldBit__SnapshotBranch_Revision_Target
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_target.w = &ma.w.target
		ma.ca_target.m = &ma.cm
		return &ma.ca_target, nil
	default:
	}
	return nil, ipld.ErrInvalidKey{TypeName: "ipldswh.SnapshotBranch_Revision.Repr", Key: &_String{k}}
}
func (ma *_SnapshotBranch_Revision__ReprAssembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_SnapshotBranch_Revision__ReprKeyAssembler)(ma)
}
func (ma *_SnapshotBranch_Revision__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_target.w = &ma.w.target
		ma.ca_target.m = &ma.cm
		return &ma.ca_target
	default:
		panic("unreachable")
	}
}
func (ma *_SnapshotBranch_Revision__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__SnapshotBranch_Revision_sufficient != fieldBits__SnapshotBranch_Revision_sufficient {
		err := ipld.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__SnapshotBranch_Revision_Target == 0 {
			err.Missing = append(err.Missing, "target")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_SnapshotBranch_Revision__ReprAssembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_SnapshotBranch_Revision__ReprAssembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler repr valueprototype")
}

type _SnapshotBranch_Revision__ReprKeyAssembler _SnapshotBranch_Revision__ReprAssembler

func (_SnapshotBranch_Revision__ReprKeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Revision.Repr.KeyAssembler"}.BeginMap(0)
}
func (_SnapshotBranch_Revision__ReprKeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Revision.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_SnapshotBranch_Revision__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Revision.Repr.KeyAssembler"}.AssignNull()
}
func (_SnapshotBranch_Revision__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Revision.Repr.KeyAssembler"}.AssignBool(false)
}
func (_SnapshotBranch_Revision__ReprKeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Revision.Repr.KeyAssembler"}.AssignInt(0)
}
func (_SnapshotBranch_Revision__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Revision.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_SnapshotBranch_Revision__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "target":
		if ka.s&fieldBit__SnapshotBranch_Revision_Target != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__SnapshotBranch_Revision_Target_serial}
		}
		ka.s += fieldBit__SnapshotBranch_Revision_Target
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	}
	return ipld.ErrInvalidKey{TypeName: "ipldswh.SnapshotBranch_Revision.Repr", Key: &_String{k}}
}
func (_SnapshotBranch_Revision__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Revision.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_SnapshotBranch_Revision__ReprKeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Revision.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_SnapshotBranch_Revision__ReprKeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_SnapshotBranch_Revision__ReprKeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}

func (n _SnapshotBranch_Snapshot) FieldTarget() Snapshot_Link {
	return &n.target
}

type _SnapshotBranch_Snapshot__Maybe struct {
	m schema.Maybe
	v SnapshotBranch_Snapshot
}
type MaybeSnapshotBranch_Snapshot = *_SnapshotBranch_Snapshot__Maybe

func (m MaybeSnapshotBranch_Snapshot) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeSnapshotBranch_Snapshot) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeSnapshotBranch_Snapshot) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeSnapshotBranch_Snapshot) AsNode() ipld.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return ipld.Absent
	case schema.Maybe_Null:
		return ipld.Null
	case schema.Maybe_Value:
		return m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeSnapshotBranch_Snapshot) Must() SnapshotBranch_Snapshot {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}

var (
	fieldName__SnapshotBranch_Snapshot_Target = _String{"target"}
)
var _ ipld.Node = (SnapshotBranch_Snapshot)(&_SnapshotBranch_Snapshot{})
var _ schema.TypedNode = (SnapshotBranch_Snapshot)(&_SnapshotBranch_Snapshot{})

func (SnapshotBranch_Snapshot) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n SnapshotBranch_Snapshot) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "target":
		return &n.target, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n SnapshotBranch_Snapshot) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (SnapshotBranch_Snapshot) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Snapshot"}.LookupByIndex(0)
}
func (n SnapshotBranch_Snapshot) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n SnapshotBranch_Snapshot) MapIterator() ipld.MapIterator {
	return &_SnapshotBranch_Snapshot__MapItr{n, 0}
}

type _SnapshotBranch_Snapshot__MapItr struct {
	n   SnapshotBranch_Snapshot
	idx int
}

func (itr *_SnapshotBranch_Snapshot__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 1 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__SnapshotBranch_Snapshot_Target
		v = &itr.n.target
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_SnapshotBranch_Snapshot__MapItr) Done() bool {
	return itr.idx >= 1
}

func (SnapshotBranch_Snapshot) ListIterator() ipld.ListIterator {
	return nil
}
func (SnapshotBranch_Snapshot) Length() int64 {
	return 1
}
func (SnapshotBranch_Snapshot) IsAbsent() bool {
	return false
}
func (SnapshotBranch_Snapshot) IsNull() bool {
	return false
}
func (SnapshotBranch_Snapshot) AsBool() (bool, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Snapshot"}.AsBool()
}
func (SnapshotBranch_Snapshot) AsInt() (int64, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Snapshot"}.AsInt()
}
func (SnapshotBranch_Snapshot) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Snapshot"}.AsFloat()
}
func (SnapshotBranch_Snapshot) AsString() (string, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Snapshot"}.AsString()
}
func (SnapshotBranch_Snapshot) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Snapshot"}.AsBytes()
}
func (SnapshotBranch_Snapshot) AsLink() (ipld.Link, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Snapshot"}.AsLink()
}
func (SnapshotBranch_Snapshot) Prototype() ipld.NodePrototype {
	return _SnapshotBranch_Snapshot__Prototype{}
}

type _SnapshotBranch_Snapshot__Prototype struct{}

func (_SnapshotBranch_Snapshot__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _SnapshotBranch_Snapshot__Builder
	nb.Reset()
	return &nb
}

type _SnapshotBranch_Snapshot__Builder struct {
	_SnapshotBranch_Snapshot__Assembler
}

func (nb *_SnapshotBranch_Snapshot__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_SnapshotBranch_Snapshot__Builder) Reset() {
	var w _SnapshotBranch_Snapshot
	var m schema.Maybe
	*nb = _SnapshotBranch_Snapshot__Builder{_SnapshotBranch_Snapshot__Assembler{w: &w, m: &m}}
}

type _SnapshotBranch_Snapshot__Assembler struct {
	w     *_SnapshotBranch_Snapshot
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm        schema.Maybe
	ca_target _Snapshot_Link__Assembler
}

func (na *_SnapshotBranch_Snapshot__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_target.reset()
}

var (
	fieldBit__SnapshotBranch_Snapshot_Target      = 1 << 0
	fieldBits__SnapshotBranch_Snapshot_sufficient = 0 + 1<<0
)

func (na *_SnapshotBranch_Snapshot__Assembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_SnapshotBranch_Snapshot{}
	}
	return na, nil
}
func (_SnapshotBranch_Snapshot__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Snapshot"}.BeginList(0)
}
func (na *_SnapshotBranch_Snapshot__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Snapshot"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_SnapshotBranch_Snapshot__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Snapshot"}.AssignBool(false)
}
func (_SnapshotBranch_Snapshot__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Snapshot"}.AssignInt(0)
}
func (_SnapshotBranch_Snapshot__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Snapshot"}.AssignFloat(0)
}
func (_SnapshotBranch_Snapshot__Assembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Snapshot"}.AssignString("")
}
func (_SnapshotBranch_Snapshot__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Snapshot"}.AssignBytes(nil)
}
func (_SnapshotBranch_Snapshot__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Snapshot"}.AssignLink(nil)
}
func (na *_SnapshotBranch_Snapshot__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_SnapshotBranch_Snapshot); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "ipldswh.SnapshotBranch_Snapshot", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_SnapshotBranch_Snapshot__Assembler) Prototype() ipld.NodePrototype {
	return _SnapshotBranch_Snapshot__Prototype{}
}
func (ma *_SnapshotBranch_Snapshot__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_target.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_SnapshotBranch_Snapshot__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "target":
		if ma.s&fieldBit__SnapshotBranch_Snapshot_Target != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__SnapshotBranch_Snapshot_Target}
		}
		ma.s += fieldBit__SnapshotBranch_Snapshot_Target
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_target.w = &ma.w.target
		ma.ca_target.m = &ma.cm
		return &ma.ca_target, nil
	}
	return nil, ipld.ErrInvalidKey{TypeName: "ipldswh.SnapshotBranch_Snapshot", Key: &_String{k}}
}
func (ma *_SnapshotBranch_Snapshot__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_SnapshotBranch_Snapshot__KeyAssembler)(ma)
}
func (ma *_SnapshotBranch_Snapshot__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_target.w = &ma.w.target
		ma.ca_target.m = &ma.cm
		return &ma.ca_target
	default:
		panic("unreachable")
	}
}
func (ma *_SnapshotBranch_Snapshot__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__SnapshotBranch_Snapshot_sufficient != fieldBits__SnapshotBranch_Snapshot_sufficient {
		err := ipld.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__SnapshotBranch_Snapshot_Target == 0 {
			err.Missing = append(err.Missing, "target")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_SnapshotBranch_Snapshot__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_SnapshotBranch_Snapshot__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}

type _SnapshotBranch_Snapshot__KeyAssembler _SnapshotBranch_Snapshot__Assembler

func (_SnapshotBranch_Snapshot__KeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Snapshot.KeyAssembler"}.BeginMap(0)
}
func (_SnapshotBranch_Snapshot__KeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Snapshot.KeyAssembler"}.BeginList(0)
}
func (na *_SnapshotBranch_Snapshot__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Snapshot.KeyAssembler"}.AssignNull()
}
func (_SnapshotBranch_Snapshot__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Snapshot.KeyAssembler"}.AssignBool(false)
}
func (_SnapshotBranch_Snapshot__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Snapshot.KeyAssembler"}.AssignInt(0)
}
func (_SnapshotBranch_Snapshot__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Snapshot.KeyAssembler"}.AssignFloat(0)
}
func (ka *_SnapshotBranch_Snapshot__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "target":
		if ka.s&fieldBit__SnapshotBranch_Snapshot_Target != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__SnapshotBranch_Snapshot_Target}
		}
		ka.s += fieldBit__SnapshotBranch_Snapshot_Target
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	default:
		return ipld.ErrInvalidKey{TypeName: "ipldswh.SnapshotBranch_Snapshot", Key: &_String{k}}
	}
}
func (_SnapshotBranch_Snapshot__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Snapshot.KeyAssembler"}.AssignBytes(nil)
}
func (_SnapshotBranch_Snapshot__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Snapshot.KeyAssembler"}.AssignLink(nil)
}
func (ka *_SnapshotBranch_Snapshot__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_SnapshotBranch_Snapshot__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (SnapshotBranch_Snapshot) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n SnapshotBranch_Snapshot) Representation() ipld.Node {
	return (*_SnapshotBranch_Snapshot__Repr)(n)
}

type _SnapshotBranch_Snapshot__Repr _SnapshotBranch_Snapshot

var (
	fieldName__SnapshotBranch_Snapshot_Target_serial = _String{"target"}
)
var _ ipld.Node = &_SnapshotBranch_Snapshot__Repr{}

func (_SnapshotBranch_Snapshot__Repr) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n *_SnapshotBranch_Snapshot__Repr) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "target":
		return n.target.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n *_SnapshotBranch_Snapshot__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_SnapshotBranch_Snapshot__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Snapshot.Repr"}.LookupByIndex(0)
}
func (n _SnapshotBranch_Snapshot__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_SnapshotBranch_Snapshot__Repr) MapIterator() ipld.MapIterator {
	return &_SnapshotBranch_Snapshot__ReprMapItr{n, 0}
}

type _SnapshotBranch_Snapshot__ReprMapItr struct {
	n   *_SnapshotBranch_Snapshot__Repr
	idx int
}

func (itr *_SnapshotBranch_Snapshot__ReprMapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 1 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__SnapshotBranch_Snapshot_Target_serial
		v = itr.n.target.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_SnapshotBranch_Snapshot__ReprMapItr) Done() bool {
	return itr.idx >= 1
}
func (_SnapshotBranch_Snapshot__Repr) ListIterator() ipld.ListIterator {
	return nil
}
func (rn *_SnapshotBranch_Snapshot__Repr) Length() int64 {
	l := 1
	return int64(l)
}
func (_SnapshotBranch_Snapshot__Repr) IsAbsent() bool {
	return false
}
func (_SnapshotBranch_Snapshot__Repr) IsNull() bool {
	return false
}
func (_SnapshotBranch_Snapshot__Repr) AsBool() (bool, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Snapshot.Repr"}.AsBool()
}
func (_SnapshotBranch_Snapshot__Repr) AsInt() (int64, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Snapshot.Repr"}.AsInt()
}
func (_SnapshotBranch_Snapshot__Repr) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Snapshot.Repr"}.AsFloat()
}
func (_SnapshotBranch_Snapshot__Repr) AsString() (string, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Snapshot.Repr"}.AsString()
}
func (_SnapshotBranch_Snapshot__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Snapshot.Repr"}.AsBytes()
}
func (_SnapshotBranch_Snapshot__Repr) AsLink() (ipld.Link, error) {
	return mixins.Map{TypeName: "ipldswh.SnapshotBranch_Snapshot.Repr"}.AsLink()
}
func (_SnapshotBranch_Snapshot__Repr) Prototype() ipld.NodePrototype {
	return _SnapshotBranch_Snapshot__ReprPrototype{}
}

type _SnapshotBranch_Snapshot__ReprPrototype struct{}

func (_SnapshotBranch_Snapshot__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _SnapshotBranch_Snapshot__ReprBuilder
	nb.Reset()
	return &nb
}

type _SnapshotBranch_Snapshot__ReprBuilder struct {
	_SnapshotBranch_Snapshot__ReprAssembler
}

func (nb *_SnapshotBranch_Snapshot__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_SnapshotBranch_Snapshot__ReprBuilder) Reset() {
	var w _SnapshotBranch_Snapshot
	var m schema.Maybe
	*nb = _SnapshotBranch_Snapshot__ReprBuilder{_SnapshotBranch_Snapshot__ReprAssembler{w: &w, m: &m}}
}

type _SnapshotBranch_Snapshot__ReprAssembler struct {
	w     *_SnapshotBranch_Snapshot
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm        schema.Maybe
	ca_target _Snapshot_Link__ReprAssembler
}

func (na *_SnapshotBranch_Snapshot__ReprAssembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_target.reset()
}
func (na *_SnapshotBranch_Snapshot__ReprAssembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_SnapshotBranch_Snapshot{}
	}
	return na, nil
}
func (_SnapshotBranch_Snapshot__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Snapshot.Repr"}.BeginList(0)
}
func (na *_SnapshotBranch_Snapshot__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Snapshot.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_SnapshotBranch_Snapshot__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Snapshot.Repr"}.AssignBool(false)
}
func (_SnapshotBranch_Snapshot__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Snapshot.Repr"}.AssignInt(0)
}
func (_SnapshotBranch_Snapshot__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Snapshot.Repr"}.AssignFloat(0)
}
func (_SnapshotBranch_Snapshot__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Snapshot.Repr"}.AssignString("")
}
func (_SnapshotBranch_Snapshot__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Snapshot.Repr"}.AssignBytes(nil)
}
func (_SnapshotBranch_Snapshot__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{TypeName: "ipldswh.SnapshotBranch_Snapshot.Repr"}.AssignLink(nil)
}
func (na *_SnapshotBranch_Snapshot__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_SnapshotBranch_Snapshot); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "ipldswh.SnapshotBranch_Snapshot.Repr", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_SnapshotBranch_Snapshot__ReprAssembler) Prototype() ipld.NodePrototype {
	return _SnapshotBranch_Snapshot__ReprPrototype{}
}
func (ma *_SnapshotBranch_Snapshot__ReprAssembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_SnapshotBranch_Snapshot__ReprAssembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "target":
		if ma.s&fieldBit__SnapshotBranch_Snapshot_Target != 0 {
			return nil, ipld.ErrRepeatedMapKey{Key: &fieldName__SnapshotBranch_Snapshot_Target_serial}
		}
		ma.s += fieldBit__SnapshotBranch_Snapshot_Target
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_target.w = &ma.w.target
		ma.ca_target.m = &ma.cm
		return &ma.ca_target, nil
	default:
	}
	return nil, ipld.ErrInvalidKey{TypeName: "ipldswh.SnapshotBranch_Snapshot.Repr", Key: &_String{k}}
}
func (ma *_SnapshotBranch_Snapshot__ReprAssembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_SnapshotBranch_Snapshot__ReprKeyAssembler)(ma)
}
func (ma *_SnapshotBranch_Snapshot__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_target.w = &ma.w.target
		ma.ca_target.m = &ma.cm
		return &ma.ca_target
	default:
		panic("unreachable")
	}
}
func (ma *_SnapshotBranch_Snapshot__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__SnapshotBranch_Snapshot_sufficient != fieldBits__SnapshotBranch_Snapshot_sufficient {
		err := ipld.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__SnapshotBranch_Snapshot_Target == 0 {
			err.Missing = append(err.Missing, "target")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_SnapshotBranch_Snapshot__ReprAssembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_SnapshotBranch_Snapshot__ReprAssembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler repr valueprototype")
}

type _SnapshotBranch_Snapshot__ReprKeyAssembler _SnapshotBranch_Snapshot__ReprAssembler

func (_SnapshotBranch_Snapshot__ReprKeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Snapshot.Repr.KeyAssembler"}.BeginMap(0)
}
func (_SnapshotBranch_Snapshot__ReprKeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Snapshot.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_SnapshotBranch_Snapshot__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Snapshot.Repr.KeyAssembler"}.AssignNull()
}
func (_SnapshotBranch_Snapshot__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Snapshot.Repr.KeyAssembler"}.AssignBool(false)
}
func (_SnapshotBranch_Snapshot__ReprKeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Snapshot.Repr.KeyAssembler"}.AssignInt(0)
}
func (_SnapshotBranch_Snapshot__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Snapshot.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_SnapshotBranch_Snapshot__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "target":
		if ka.s&fieldBit__SnapshotBranch_Snapshot_Target != 0 {
			return ipld.ErrRepeatedMapKey{Key: &fieldName__SnapshotBranch_Snapshot_Target_serial}
		}
		ka.s += fieldBit__SnapshotBranch_Snapshot_Target
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	}
	return ipld.ErrInvalidKey{TypeName: "ipldswh.SnapshotBranch_Snapshot.Repr", Key: &_String{k}}
}
func (_SnapshotBranch_Snapshot__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Snapshot.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_SnapshotBranch_Snapshot__ReprKeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{TypeName: "ipldswh.SnapshotBranch_Snapshot.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_SnapshotBranch_Snapshot__ReprKeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_SnapshotBranch_Snapshot__ReprKeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}

func (n Snapshot_Link) Link() ipld.Link {
	return n.x
}
func (_Snapshot_Link__Prototype) FromLink(v ipld.Link) (Snapshot_Link, error) {
	n := _Snapshot_Link{v}
	return &n, nil
}

type _Snapshot_Link__Maybe struct {
	m schema.Maybe
	v _Snapshot_Link
}
type MaybeSnapshot_Link = *_Snapshot_Link__Maybe

func (m MaybeSnapshot_Link) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeSnapshot_Link) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeSnapshot_Link) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeSnapshot_Link) AsNode() ipld.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return ipld.Absent
	case schema.Maybe_Null:
		return ipld.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeSnapshot_Link) Must() Snapshot_Link {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ ipld.Node = (Snapshot_Link)(&_Snapshot_Link{})
var _ schema.TypedNode = (Snapshot_Link)(&_Snapshot_Link{})

func (Snapshot_Link) Kind() ipld.Kind {
	return ipld.Kind_Link
}
func (Snapshot_Link) LookupByString(string) (ipld.Node, error) {
	return mixins.Link{TypeName: "ipldswh.Snapshot_Link"}.LookupByString("")
}
func (Snapshot_Link) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.Link{TypeName: "ipldswh.Snapshot_Link"}.LookupByNode(nil)
}
func (Snapshot_Link) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Link{TypeName: "ipldswh.Snapshot_Link"}.LookupByIndex(0)
}
func (Snapshot_Link) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.Link{TypeName: "ipldswh.Snapshot_Link"}.LookupBySegment(seg)
}
func (Snapshot_Link) MapIterator() ipld.MapIterator {
	return nil
}
func (Snapshot_Link) ListIterator() ipld.ListIterator {
	return nil
}
func (Snapshot_Link) Length() int64 {
	return -1
}
func (Snapshot_Link) IsAbsent() bool {
	return false
}
func (Snapshot_Link) IsNull() bool {
	return false
}
func (Snapshot_Link) AsBool() (bool, error) {
	return mixins.Link{TypeName: "ipldswh.Snapshot_Link"}.AsBool()
}
func (Snapshot_Link) AsInt() (int64, error) {
	return mixins.Link{TypeName: "ipldswh.Snapshot_Link"}.AsInt()
}
func (Snapshot_Link) AsFloat() (float64, error) {
	return mixins.Link{TypeName: "ipldswh.Snapshot_Link"}.AsFloat()
}
func (Snapshot_Link) AsString() (string, error) {
	return mixins.Link{TypeName: "ipldswh.Snapshot_Link"}.AsString()
}
func (Snapshot_Link) AsBytes() ([]byte, error) {
	return mixins.Link{TypeName: "ipldswh.Snapshot_Link"}.AsBytes()
}
func (n Snapshot_Link) AsLink() (ipld.Link, error) {
	return n.x, nil
}
func (Snapshot_Link) Prototype() ipld.NodePrototype {
	return _Snapshot_Link__Prototype{}
}

type _Snapshot_Link__Prototype struct{}

func (_Snapshot_Link__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Snapshot_Link__Builder
	nb.Reset()
	return &nb
}

type _Snapshot_Link__Builder struct {
	_Snapshot_Link__Assembler
}

func (nb *_Snapshot_Link__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Snapshot_Link__Builder) Reset() {
	var w _Snapshot_Link
	var m schema.Maybe
	*nb = _Snapshot_Link__Builder{_Snapshot_Link__Assembler{w: &w, m: &m}}
}

type _Snapshot_Link__Assembler struct {
	w *_Snapshot_Link
	m *schema.Maybe
}

func (na *_Snapshot_Link__Assembler) reset() {}
func (_Snapshot_Link__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.LinkAssembler{TypeName: "ipldswh.Snapshot_Link"}.BeginMap(0)
}
func (_Snapshot_Link__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.LinkAssembler{TypeName: "ipldswh.Snapshot_Link"}.BeginList(0)
}
func (na *_Snapshot_Link__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.LinkAssembler{TypeName: "ipldswh.Snapshot_Link"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Snapshot_Link__Assembler) AssignBool(bool) error {
	return mixins.LinkAssembler{TypeName: "ipldswh.Snapshot_Link"}.AssignBool(false)
}
func (_Snapshot_Link__Assembler) AssignInt(int64) error {
	return mixins.LinkAssembler{TypeName: "ipldswh.Snapshot_Link"}.AssignInt(0)
}
func (_Snapshot_Link__Assembler) AssignFloat(float64) error {
	return mixins.LinkAssembler{TypeName: "ipldswh.Snapshot_Link"}.AssignFloat(0)
}
func (_Snapshot_Link__Assembler) AssignString(string) error {
	return mixins.LinkAssembler{TypeName: "ipldswh.Snapshot_Link"}.AssignString("")
}
func (_Snapshot_Link__Assembler) AssignBytes([]byte) error {
	return mixins.LinkAssembler{TypeName: "ipldswh.Snapshot_Link"}.AssignBytes(nil)
}
func (na *_Snapshot_Link__Assembler) AssignLink(v ipld.Link) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (na *_Snapshot_Link__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Snapshot_Link); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsLink(); err != nil {
		return err
	} else {
		return na.AssignLink(v2)
	}
}
func (_Snapshot_Link__Assembler) Prototype() ipld.NodePrototype {
	return _Snapshot_Link__Prototype{}
}
func (Snapshot_Link) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (Snapshot_Link) LinkTargetNodePrototype() ipld.NodePrototype {
	return Type.Snapshot__Repr
}
func (n Snapshot_Link) Representation() ipld.Node {
	return (*_Snapshot_Link__Repr)(n)
}

type _Snapshot_Link__Repr = _Snapshot_Link

var _ ipld.Node = &_Snapshot_Link__Repr{}

type _Snapshot_Link__ReprPrototype = _Snapshot_Link__Prototype
type _Snapshot_Link__ReprAssembler = _Snapshot_Link__Assembler

func (n String) String() string {
	return n.x
}
func (_String__Prototype) fromString(w *_String, v string) error {
	*w = _String{v}
	return nil
}
func (_String__Prototype) FromString(v string) (String, error) {
	n := _String{v}
	return &n, nil
}

type _String__Maybe struct {
	m schema.Maybe
	v _String
}
type MaybeString = *_String__Maybe

func (m MaybeString) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeString) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeString) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeString) AsNode() ipld.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return ipld.Absent
	case schema.Maybe_Null:
		return ipld.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeString) Must() String {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ ipld.Node = (String)(&_String{})
var _ schema.TypedNode = (String)(&_String{})

func (String) Kind() ipld.Kind {
	return ipld.Kind_String
}
func (String) LookupByString(string) (ipld.Node, error) {
	return mixins.String{TypeName: "ipldswh.String"}.LookupByString("")
}
func (String) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.String{TypeName: "ipldswh.String"}.LookupByNode(nil)
}
func (String) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.String{TypeName: "ipldswh.String"}.LookupByIndex(0)
}
func (String) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.String{TypeName: "ipldswh.String"}.LookupBySegment(seg)
}
func (String) MapIterator() ipld.MapIterator {
	return nil
}
func (String) ListIterator() ipld.ListIterator {
	return nil
}
func (String) Length() int64 {
	return -1
}
func (String) IsAbsent() bool {
	return false
}
func (String) IsNull() bool {
	return false
}
func (String) AsBool() (bool, error) {
	return mixins.String{TypeName: "ipldswh.String"}.AsBool()
}
func (String) AsInt() (int64, error) {
	return mixins.String{TypeName: "ipldswh.String"}.AsInt()
}
func (String) AsFloat() (float64, error) {
	return mixins.String{TypeName: "ipldswh.String"}.AsFloat()
}
func (n String) AsString() (string, error) {
	return n.x, nil
}
func (String) AsBytes() ([]byte, error) {
	return mixins.String{TypeName: "ipldswh.String"}.AsBytes()
}
func (String) AsLink() (ipld.Link, error) {
	return mixins.String{TypeName: "ipldswh.String"}.AsLink()
}
func (String) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}

type _String__Prototype struct{}

func (_String__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _String__Builder
	nb.Reset()
	return &nb
}

type _String__Builder struct {
	_String__Assembler
}

func (nb *_String__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_String__Builder) Reset() {
	var w _String
	var m schema.Maybe
	*nb = _String__Builder{_String__Assembler{w: &w, m: &m}}
}

type _String__Assembler struct {
	w *_String
	m *schema.Maybe
}

func (na *_String__Assembler) reset() {}
func (_String__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldswh.String"}.BeginMap(0)
}
func (_String__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldswh.String"}.BeginList(0)
}
func (na *_String__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.StringAssembler{TypeName: "ipldswh.String"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_String__Assembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "ipldswh.String"}.AssignBool(false)
}
func (_String__Assembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "ipldswh.String"}.AssignInt(0)
}
func (_String__Assembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "ipldswh.String"}.AssignFloat(0)
}
func (na *_String__Assembler) AssignString(v string) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_String__Assembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "ipldswh.String"}.AssignBytes(nil)
}
func (_String__Assembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{TypeName: "ipldswh.String"}.AssignLink(nil)
}
func (na *_String__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_String); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return na.AssignString(v2)
	}
}
func (_String__Assembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (String) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n String) Representation() ipld.Node {
	return (*_String__Repr)(n)
}

type _String__Repr = _String

var _ ipld.Node = &_String__Repr{}

type _String__ReprPrototype = _String__Prototype
type _String__ReprAssembler = _String__Assembler
